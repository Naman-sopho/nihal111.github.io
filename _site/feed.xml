<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nihal Singh</title>
    <description>A guide to getting started with Jekyll.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 06 Jun 2017 23:54:08 +0530</pubDate>
    <lastBuildDate>Tue, 06 Jun 2017 23:54:08 +0530</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>GSoC Week 5: The Swing King</title>
        <description>&lt;style type=&quot;text/css&quot;&gt;
    .collapsiblecontainer {
    width:100%;
    border:1px solid #d3d3d3;
}
.collapsiblecontainer div {
    width:100%;
}
.collapsiblecontainer .collapsibleheader {
    background-color:#d3d3d3;
    padding: 2px;
    cursor: pointer;
    font-weight: bold;
}
.collapsiblecontainer .collapsiblecontent {
    display: none;
    padding : 5px;
}
&lt;/style&gt;

&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.12.0/jquery.min.js&quot;&gt;&lt;/script&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
$(document).ready(function(){
    $(&quot;.collapsibleheader&quot;).click(function () {
        $collapsibleheader = $(this);
        //getting the next element
        $collapsiblecontent = $collapsibleheader.next();
        //open up the collapsiblecontent needed - toggle the slide- if visible, slide up, if not slidedown.
        $collapsiblecontent.slideToggle(500, function () {
            //execute this after slideToggle is done
            //change text of collapsibleheader based on visibility of collapsiblecontent div
            $collapsibleheader.find(&quot;span:first-child&quot;).text(function () {
                //change text based on condition
                return $collapsiblecontent.is(&quot;:visible&quot;) ? &quot;- &quot; : &quot;+ &quot;;
            });
        });

    });
}); 

&lt;/script&gt;

&lt;p&gt;Last week involved a lot of discussions. The plan for the next two months is now a lot clearer. Here’s a quick fun video that should explain the title of this blog post.&lt;/p&gt;

&lt;div class=&quot;videowrapper&quot;&gt;
    &lt;iframe width=&quot;1024&quot; height=&quot;768&quot; src=&quot;https://www.youtube.com/embed/efCmy_e7JRU&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h1 id=&quot;what-have-i-been-upto&quot;&gt;What have I been upto?&lt;/h1&gt;

&lt;h2 id=&quot;woodandstonecraftingjournal&quot;&gt;WoodAndStoneCraftingJournal&lt;/h2&gt;
&lt;p&gt;With last week’s journal improvements, it was time to put the journal to some good use. A good technique to do this is to use the main Gampleay module for all story/lore related journal entries. However for most of the content related entries like crafting tutorials or cooking recipes, the best way to go is to create Journal extension modules. These extension modules would connect each content module to the Journal module. Essentially, the Journal extension module would house the Journal entries related to that content module which can easily be reused by multiple gameplay modules.&lt;/p&gt;

&lt;p&gt;I went ahead and created the first Journal Extension module as a proof of concept with only about 6 entries to demonstrate how it would work. The WoodAndStoneCraftingJournal has a dependency on WoodCrafting, StoneCrafting and Journal. It contains the journal entries pertaining to both WoodCrafting and StoneCrafting (since both are a little related).&lt;/p&gt;

&lt;h2 id=&quot;where-are-the-puzzles&quot;&gt;Where are the puzzles?&lt;/h2&gt;
&lt;p&gt;A major chunk of my last two month work consists of making Puzzles and adding them to my exploration based module.
After some discussion with flo about cata’s project on scenarios, I realised that it would be redundant to spend time working on mechanisms for action/event triggered changes. Since the Scenarios project would be focused on dealing with this, it would be a better idea that I aim towards making puzzle elements like traps, portals and other dangerous pieces.&lt;/p&gt;

&lt;h3 id=&quot;adventure-assets&quot;&gt;Adventure Assets&lt;/h3&gt;
&lt;p&gt;With this new direction to work on, I’ve created a &lt;a href=&quot;https://docs.google.com/document/d/1Go425IJSUEI2baXX0PkSamLIHZf7qYOA7emu6qH7PvE/edit?usp=sharing&quot;&gt;list of potential items&lt;/a&gt; that I could work on. Also a new module called &lt;a href=&quot;https://github.com/Terasology/AdventureAssets/&quot;&gt;AdventureAssets&lt;/a&gt; has been created to house such elements.&lt;/p&gt;

&lt;p&gt;The idea now, is that I would create various puzzle elements and combine them together in a few different settings. I would create structure templates for these puzzles akin to the dungeons in GooeysQuests. This would allow me to place these puzzles in my exploration world manually by using a structure spawner. I plan to place these puzzles in the world manually and share the saved file which could be played with.&lt;/p&gt;

&lt;div class=&quot;collapsiblecontainer&quot;&gt;
&lt;div class=&quot;collapsibleheader&quot;&gt;&lt;span&gt;+ &lt;/span&gt;&lt;span&gt;Why do I want to use Structure Templates?&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;collapsiblecontent&quot;&gt;   
    Structure Templates allows me to create a puzzle setting or essentially a puzzle map, as a prefab. I can arrange the elements in the manner I want and also edit the map later. In theory, I could create the puzzles by hand in the saved world that I plan to share, without using Structure Templates at all. However using Structure Templates allows me to concentrate on making the puzzles one by one without worrying about how I would place them in the world. Once I have the Structure Templates for the puzzles ready I can place them however I want in the world. Also, this allows the same created puzzle to be reused multiple times. An existing puzzle can be extended or modified slightly to create a new one. Further, if a puzzle consists of multiple rooms of the same type, a single room created using ST can be easily reused to create more.
&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;the-swinging-blade&quot;&gt;The Swinging Blade&lt;/h2&gt;
&lt;p&gt;The first item I decided to work on was the Swinging Blade. The setup consists of a huge blade that swings to and fro from one edge of the room to the other. This would serve as on obstacle and coming in contact with the blade would deal damage to the player.&lt;/p&gt;

&lt;p&gt;I started working with a crude swinging blade model made by flo.&lt;/p&gt;

&lt;h3 id=&quot;animating-the-blade&quot;&gt;Animating the blade&lt;/h3&gt;
&lt;p&gt;I tried to make the blade move by linearly varying the &lt;code class=&quot;highlighter-rouge&quot;&gt;pitch&lt;/code&gt;(as in rotation’s &lt;code class=&quot;highlighter-rouge&quot;&gt;yaw, pitch and roll&lt;/code&gt;) of the entity. The GIF below has this linear movement. This motion was later changed to an angular harmonic function, which factors in a time period (in seconds), an amplitude (in radians) and an offset/phase difference (in radians) which looks like &lt;code class=&quot;highlighter-rouge&quot;&gt;theta = Acos((2*pi/T)*t + phi)&lt;/code&gt;.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/img/crudeSwingingBlade.gif&quot; alt=&quot;crudeSB&quot; title=&quot;crude SB&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;alignment-and-orientation&quot;&gt;Alignment and orientation&lt;/h3&gt;
&lt;p&gt;The swinging blade was misaligned and I wanted it to rotate in a direction purpendicular to it’s current rotation. Soon I realised that I had no control on the orientaion of how the Swinging Blade entity that was being spawned by the Structure Template. I could choose the position but I couldn’t change the orientation and rotation. This is because the Structure Template module allows you to spawn the structure anywhere in the world, regardless of the orientation in which they were created. Meaning, a structure that faces North can be spawned in a manner that it now faces East. All contents of the structure should undergo a similar change in their orientation too. But the entities didn’t. Till now, it wasn’t a problem as the only things being spawned were the GooeysQuests’ skeletons. Their orientation didn’t matter as they were live entities that would come running after you for your life.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Terasology/StructureTemplates/pull/15&quot;&gt;This PR&lt;/a&gt; adds the rotational control to spawning entities while using the SpawnPrefabComponent in the Structure Templates module.&lt;/p&gt;

&lt;div class=&quot;collapsiblecontainer&quot;&gt;
&lt;div class=&quot;collapsibleheader&quot;&gt;&lt;span&gt;+ &lt;/span&gt;&lt;span&gt;Dealing with Quaternions (Quat4f)&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;collapsiblecontent&quot;&gt;   
    I hadn't dealt with quaternions before and the above fix in the PR wasn't as straightforward to me as it looks like. I didn't really want to spend too much time learning how Quaternions work to make a simple change. I knew how the yaw, pitch and roll system worked and all I needed was to change the yaw value by a mutiple of 90 degree depending on the orientation in which the room was spawned. After a few attempts of Googling and ending up on wikipedia pages that deal with rigorous math to show how Quaternions work I was almost ready to give up. It was then that I bumped into this &lt;a target=&quot;_blank&quot; href=&quot;http://developerblog.myo.com/quaternions/&quot;&gt;blog post&lt;/a&gt; that made me understand and appreciate Quaternions. Soon after I found a &lt;a target=&quot;_blank&quot; href=&quot;https://gamedev.stackexchange.com/questions/23510/rotate-an-existing-quaternion-around-an-axis&quot;&gt;forum answer&lt;/a&gt; that gave me a good idea on how to solve my problem.
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;new-model-and-texture&quot;&gt;New model and texture&lt;/h3&gt;

&lt;p&gt;Soon after I asked Quaternius to make a better model for the swinging blade and one thing led to another. Not before long, we had a full nice looking model ready with texture.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/img/SB1.jpeg&quot; alt=&quot;SB1&quot; title=&quot;SB1&quot; style=&quot;width: 70%;&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/img/SB2.jpg&quot; alt=&quot;SB2&quot; title=&quot;SB2&quot; style=&quot;width: 70%;&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/img/SB3.png&quot; alt=&quot;SB3&quot; title=&quot;SB3&quot; style=&quot;width: 70%;&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/img/SB4.jpg&quot; alt=&quot;SB4&quot; title=&quot;SB4&quot; style=&quot;width: 70%;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;making-it-hurt&quot;&gt;Making it hurt&lt;/h3&gt;

&lt;p&gt;I had a fine looking swinging blade, but it didn’t hurt yet. I could pass through it without damaging a hair on my body.&lt;/p&gt;
&lt;h4 id=&quot;adding-colliders&quot;&gt;Adding Colliders&lt;/h4&gt;
&lt;p&gt;First step was to make the entity a rigid body add box shape colliders. Since the shape of the entity was not so simple, I had to create two different entities- one for the blade and one for the rod.&lt;/p&gt;
&lt;h4 id=&quot;adding-the-dodamageevent&quot;&gt;Adding the DoDamageEvent&lt;/h4&gt;
&lt;p&gt;Since the blade was the part which would hurt, a &lt;code class=&quot;highlighter-rouge&quot;&gt;DamagePlayerComponent&lt;/code&gt; was added to the blade to detect collisions with the player and trigger a &lt;code class=&quot;highlighter-rouge&quot;&gt;DoDamageEvent&lt;/code&gt;. However, simply sending a &lt;code class=&quot;highlighter-rouge&quot;&gt;DoDamageEvent&lt;/code&gt; would kill the player in no time as however small the damage being sent, being in contact with the blade even for a second would trigger the &lt;code class=&quot;highlighter-rouge&quot;&gt;OnCollide&lt;/code&gt; method several times to result in death.&lt;/p&gt;
&lt;h4 id=&quot;sending-a-characterimpulse&quot;&gt;Sending a CharacterImpulse&lt;/h4&gt;
&lt;p&gt;The solution to this was sending a &lt;code class=&quot;highlighter-rouge&quot;&gt;CharacterImpulseEvent&lt;/code&gt; to the player as well, in a direction outward from the blade. This sends the player to a relatively safer zone and also deals some damage.&lt;/p&gt;

&lt;h3 id=&quot;multiplayer-ready&quot;&gt;Multiplayer ready?&lt;/h3&gt;

&lt;p&gt;The swinging blade is not yet multiplayer ready. There are quite a few issues on dealing with the Swinging Blade in multiplayer. The movement prediction on the server side deals with the CharacterImpulseEvent which makes the damaging systems function very differently even if there is a little lag.&lt;/p&gt;

&lt;p&gt;The PR which deals with the entire work on the swinging blade is &lt;a href=&quot;https://github.com/Terasology/AdventureAssets/pull/2/&quot;&gt;here&lt;/a&gt;. It is still in progress with only the task of making it work in multiplayer being outstanding.&lt;/p&gt;

&lt;p&gt;Up for next week should be more work on puzzles, a few more interesting traps and hopefully multiplayer fixes.&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Jun 2017 00:00:00 +0530</pubDate>
        <link>http://localhost:4000/2017/06/06/GSoC-week5.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/06/06/GSoC-week5.html</guid>
        
        <category>open source</category>
        
        <category>MovingBlocks</category>
        
        <category>Terasology</category>
        
        <category>GSoC</category>
        
        
      </item>
    
      <item>
        <title>GSoC Week 4: Integrating Journal</title>
        <description>&lt;style type=&quot;text/css&quot;&gt;
    .collapsiblecontainer {
    width:100%;
    border:1px solid #d3d3d3;
}
.collapsiblecontainer div {
    width:100%;
}
.collapsiblecontainer .collapsibleheader {
    background-color:#d3d3d3;
    padding: 2px;
    cursor: pointer;
    font-weight: bold;
}
.collapsiblecontainer .collapsiblecontent {
    display: none;
    padding : 5px;
}
&lt;/style&gt;

&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.12.0/jquery.min.js&quot;&gt;&lt;/script&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
$(document).ready(function(){
    $(&quot;.collapsibleheader&quot;).click(function () {
        $collapsibleheader = $(this);
        //getting the next element
        $collapsiblecontent = $collapsibleheader.next();
        //open up the collapsiblecontent needed - toggle the slide- if visible, slide up, if not slidedown.
        $collapsiblecontent.slideToggle(500, function () {
            //execute this after slideToggle is done
            //change text of collapsibleheader based on visibility of collapsiblecontent div
            $collapsibleheader.find(&quot;span:first-child&quot;).text(function () {
                //change text based on condition
                return $collapsiblecontent.is(&quot;:visible&quot;) ? &quot;- &quot; : &quot;+ &quot;;
            });
        });

    });
}); 

&lt;/script&gt;

&lt;p&gt;The past week involved creating the new module for my exploration world and getting sarted with it.&lt;/p&gt;

&lt;h1 id=&quot;what-have-i-been-up-to&quot;&gt;What have I been up to?&lt;/h1&gt;

&lt;h2 id=&quot;creating-the-lost-module&quot;&gt;Creating the Lost module&lt;/h2&gt;

&lt;p&gt;The Lost module is the new gameplay module that I have created and would be working on for the next two months. I’m still working on writing some logs but the general idea for the &lt;a href=&quot;https://docs.google.com/document/d/1GVmJEV2KKjqgxjtVR-_Lh7QsvRzQbfxg9qeHjimIbPg/edit?usp=sharing&quot;&gt;lore&lt;/a&gt; is complete. In short the story is centered around an intergalactic explorer who while exploring the vast world of Terasology, gets stranded. The wormhole creator that allows him to travel through space becomes dysfunctional. Fornlorn with no way to return to his home planet, he starts exploring the planet, trying to survive on what may become the last planet he would ever set his foot on.&lt;/p&gt;

&lt;h2 id=&quot;integrating-journal&quot;&gt;Integrating Journal&lt;/h2&gt;
&lt;p&gt;A key part of the new explorationn world would be a journal that links several things. The main purpose of the Journal would be to serve as a secondary memory for the player. I plan to use the Journal in several ways-&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Exploration logs that would be generated as time passes or when an event occurs. Like when the player first spots a deer or finds a treasure.&lt;/li&gt;
  &lt;li&gt;New recipes would show up when the player pick a new item. Like picking up a stone would create an entry with the recipe for hammer.&lt;/li&gt;
  &lt;li&gt;The journal would be integrated with books. Whenever you open an important book, the key parts of the book would be stored in the journal.&lt;/li&gt;
  &lt;li&gt;Integrations with content modules like WoodCrafting, StoneCrafting (earlier WoodAndStone), CopperAndBronze, Alchemy, EquipmentSmithing, Equipment, Cooking and SimpleFarming. These would essentially be tutorials to help the player. Essentially recipes that show up, guides about more involved process like different quality of ingredients resulting in different final products.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As of now the Journal has only been integrated with item pick up events and an initial on-spawn event that sends the first journal entry.&lt;/p&gt;

&lt;h2 id=&quot;improvements-in-journal&quot;&gt;Improvements in Journal&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/Terasology/Journal&quot;&gt;Journal module&lt;/a&gt; was left pretty much untouched since &lt;a href=&quot;https://github.com/MarcinSc&quot;&gt;MarcinSc&lt;/a&gt; had created. The Journal module looks like so-&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/img/WaSJournal.png&quot; alt=&quot;WoodAndStone Journal&quot; title=&quot;WoodAndStone Journal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It has a left panel for different chapters and each chapter has its own entries. This handles categorisation pretty well, making it easier for the user to access specific entries and saving a long scroll.&lt;/p&gt;

&lt;p&gt;I’ve added another enhancement which now makes the Journal more interactive. Earlier there was just a notification that would pop up when a new Journal Entry was added. However, it wouldn’t be highlighted in any way in the Journal. With the &lt;a href=&quot;https://github.com/Terasology/Journal/pull/3/&quot;&gt;latest PR&lt;/a&gt; merged, now the unread Journal entries appear highlightedin yellow, until the chapter they belong to gets opened once.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/img/UnreadJournal.png&quot; alt=&quot;Unread Journal&quot; title=&quot;Unread Journal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the image above, Exploration Log #111 is a “read” entry while Exploration Log #112 is a new/”unread” entry.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Roadblock:&lt;/em&gt;&lt;/strong&gt; There was a problem with the Journal module though, the first journal entry that was required to be sent only once when the player was spawned was resent every time the player respawned. This happened because the &lt;code class=&quot;highlighter-rouge&quot;&gt;onPlayerSpawnedEvent&lt;/code&gt; was sent to the Player entity even on respawn.&lt;br /&gt;
A bigger problem was that whatever entries that the player had in his journal would all disappear when the player respawned. This happened because the player entity in the game was completely destroyed when the player died. In the process all components attached to the player were stripped and destroyed too.&lt;/p&gt;

&lt;p&gt;This was what I dealt with for the larger part of last week.&lt;/p&gt;

&lt;h2 id=&quot;saving-the-player-entity-from-destruction&quot;&gt;Saving the player entity from destruction&lt;/h2&gt;
&lt;p&gt;All existing systems relied on the player entity to be totally destroyed (and stripped of all components) when the player dies in game. This however wasn’t a nice approach, as the player entity carried a lot of data that potentially could be preserved or dealt with a better way even on death.&lt;/p&gt;

&lt;p&gt;I felt this problem for the first time when I realised that my player would lose all it’s journal entries on death. However there are many other cases which require the player entity and it’s components to not be totally destroyed.&lt;/p&gt;

&lt;h4 id=&quot;the-need&quot;&gt;The need&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;A player’s inventory is always lost on death. It just disappears. With the player entity now being preserved, the player simply gets to keep its inventory after respawn. However, if needed a system can easily be added to allow items from inventory to drop when a player dies (even probabilistically).&lt;/li&gt;
  &lt;li&gt;Many other components would be better off having persisted than being destroyed at death. For eg. the EventualSkills module makes learning and gaining skills possible. All the skills a player has just would disappear if the player entity is completely destroyed, which might be undesirable.&lt;/li&gt;
  &lt;li&gt;There was no separate event that would be sent upon respawning. Now there is an additional &lt;code class=&quot;highlighter-rouge&quot;&gt;onPlayerRespawnedEvent&lt;/code&gt; that can be used for this purpose. The &lt;code class=&quot;highlighter-rouge&quot;&gt;onPlayerSpawnedEvent&lt;/code&gt; is simply an event that only gets fired once when the player enters a world for the first time.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/MovingBlocks/Terasology/pull/2958&quot;&gt;This PR&lt;/a&gt; makes the said change. It adds the &lt;strong&gt;OnPlayerRespawnedEvent, PlayerDeathEvent, AliveCharacterComponent, PlayerCharacterComponent.&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;what-happens-now&quot;&gt;What happens now&lt;/h4&gt;

&lt;p&gt;A character lives. It has the AliveComponent.
It dies.
A &lt;code class=&quot;highlighter-rouge&quot;&gt;BeforeDestroyEvent&lt;/code&gt; handler receives all entities having &lt;code class=&quot;highlighter-rouge&quot;&gt;AliveCharacterComponent&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If the entity also has a &lt;code class=&quot;highlighter-rouge&quot;&gt;PlayerCharacterComponent&lt;/code&gt;, the event is consumed to prevent destruction. The &lt;code class=&quot;highlighter-rouge&quot;&gt;AliveCharacterComponent&lt;/code&gt; is stripped off adn a &lt;code class=&quot;highlighter-rouge&quot;&gt;PlayerDeathEvent&lt;/code&gt; sent along with &lt;code class=&quot;highlighter-rouge&quot;&gt;DeathEvent&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Else just a &lt;code class=&quot;highlighter-rouge&quot;&gt;DeathEvent&lt;/code&gt; sent  and the &lt;code class=&quot;highlighter-rouge&quot;&gt;AliveCharacterComponent&lt;/code&gt; stripped off.
DeathScreen launches on &lt;code class=&quot;highlighter-rouge&quot;&gt;PlayerDeathEvent&lt;/code&gt; and sends the &lt;code class=&quot;highlighter-rouge&quot;&gt;RespawnRequestEvent&lt;/code&gt;.
&lt;code class=&quot;highlighter-rouge&quot;&gt;RespawnRequestEvent&lt;/code&gt; is received by the &lt;code class=&quot;highlighter-rouge&quot;&gt;PlayerSystem&lt;/code&gt;.
&lt;code class=&quot;highlighter-rouge&quot;&gt;PlayerSystem&lt;/code&gt; then respawns player, sets the location for &lt;code class=&quot;highlighter-rouge&quot;&gt;clientEntity&lt;/code&gt; to spawn location. Sends &lt;code class=&quot;highlighter-rouge&quot;&gt;OnPlayerRespawnedEvent&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Components that need to be removed on death are removed by receiving the &lt;code class=&quot;highlighter-rouge&quot;&gt;PlayerDeathEvent&lt;/code&gt;.
Components that need to be reset are done by receiving the &lt;code class=&quot;highlighter-rouge&quot;&gt;OnPlayerRespawnedEvent&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next week would see more work on the exploration module. I need to experiment with Structural Templates and see what’s the best way to spawn structures in different places.&lt;/p&gt;
</description>
        <pubDate>Tue, 30 May 2017 00:00:00 +0530</pubDate>
        <link>http://localhost:4000/2017/05/30/GSoC-week4.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/30/GSoC-week4.html</guid>
        
        <category>open source</category>
        
        <category>MovingBlocks</category>
        
        <category>Terasology</category>
        
        <category>GSoC</category>
        
        
      </item>
    
      <item>
        <title>GSoC Week 3: Advanced Behaviors and Taming</title>
        <description>&lt;style type=&quot;text/css&quot;&gt;
    .collapsiblecontainer {
    width:100%;
    border:1px solid #d3d3d3;
}
.collapsiblecontainer div {
    width:100%;
}
.collapsiblecontainer .collapsibleheader {
    background-color:#d3d3d3;
    padding: 2px;
    cursor: pointer;
    font-weight: bold;
}
.collapsiblecontainer .collapsiblecontent {
    display: none;
    padding : 5px;
}
&lt;/style&gt;

&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.12.0/jquery.min.js&quot;&gt;&lt;/script&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
$(document).ready(function(){
    $(&quot;.collapsibleheader&quot;).click(function () {
        $collapsibleheader = $(this);
        //getting the next element
        $collapsiblecontent = $collapsibleheader.next();
        //open up the collapsiblecontent needed - toggle the slide- if visible, slide up, if not slidedown.
        $collapsiblecontent.slideToggle(500, function () {
            //execute this after slideToggle is done
            //change text of collapsibleheader based on visibility of collapsiblecontent div
            $collapsibleheader.find(&quot;span:first-child&quot;).text(function () {
                //change text based on condition
                return $collapsiblecontent.is(&quot;:visible&quot;) ? &quot;- &quot; : &quot;+ &quot;;
            });
        });

    });
}); 

&lt;/script&gt;

&lt;p&gt;The past week has been lighter compared to the previous two, involving a lot more of packing and moving, research and documentation.&lt;/p&gt;

&lt;h1 id=&quot;what-have-i-been-up-to&quot;&gt;What have I been up to?&lt;/h1&gt;

&lt;h2 id=&quot;more-behaviors&quot;&gt;More behaviors&lt;/h2&gt;

&lt;p&gt;Adding to the 4 deer (&lt;code class=&quot;highlighter-rouge&quot;&gt;deer&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;insensitiveDeer&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;aggressiveDeer&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;hostileDeer&lt;/code&gt;) from last time two new behaviors have been added namely- &lt;code class=&quot;highlighter-rouge&quot;&gt;scared&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;friendly&lt;/code&gt;. Again these are just placeholders for actual animals that would display such behavior like a chicken (timid) and a dog (friendly). Here are two new videos that would give a quick preview.&lt;/p&gt;

&lt;div class=&quot;videowrapper&quot;&gt;
    &lt;iframe width=&quot;1024&quot; height=&quot;768&quot; src=&quot;https://www.youtube.com/embed/5VREvBUPmA0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;videowrapper&quot;&gt;
    &lt;iframe width=&quot;1024&quot; height=&quot;768&quot; src=&quot;https://www.youtube.com/embed/GbeXKIi9Mvs&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Also, the flee behavior is now improved such that the animal would always run in a direction away from the player as compared to randomly moving about like last time.&lt;/p&gt;

&lt;h2 id=&quot;packing-and-moving--advancedbehaviors&quot;&gt;Packing and Moving- AdvancedBehaviors&lt;/h2&gt;
&lt;p&gt;It was felt that the behavior work that I had been up to, should not really be restricted to the WildAnimals module. It had great potential outside for other NPCs like monsters, zombies, aliens.. you name it. One particular requirement was that of the GooeysQuests’ skeleton which would try its best to kill you in the dungeons. Currently the skeleton just has a hostile behavior, which means that it does nothing at all until a player comes close to it. After which, it would follow the player in an attempt to kill. When the player dies or escapes the skelton would return to doing nothing (standing still) where ever it had reached. The &lt;code class=&quot;highlighter-rouge&quot;&gt;hostileInProximity&lt;/code&gt; behavior that I had implemented for the hostileDeer is probably a better alternative, where in the deer switches from hostile to stray behavior. Further the behavior switching systems could be used to add a &lt;strong&gt;guard behavior&lt;/strong&gt; that would allow the skeleton to return to a specific location that it guards (a tressure, a secret door, who knows?).&lt;/p&gt;

&lt;p&gt;All this just meant one thing, that the core behavior systems should not be kept restricted to the &lt;a href=&quot;https://github.com/Terasology/WildAnimals&quot;&gt;WildAnimals&lt;/a&gt; module as they would have great use even in other modules. With this need was born the &lt;a href=&quot;https://github.com/Terasology/AdvancedBehaviors&quot;&gt;AdvancedBehaviors&lt;/a&gt; module which would just be a library module having logic and systems that are required by other modules as dependencies, but no content of its own. All the behavior systems and behavior components were packaged and moved to this new module.&lt;/p&gt;

&lt;h2 id=&quot;optional-dependencies-and-libraryapi-modules&quot;&gt;Optional Dependencies and Library/API modules&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Terasology/AdvancedBehaviors&quot;&gt;AdvancedBehaviors&lt;/a&gt; would be my second module in the game, the first being the &lt;a href=&quot;https://github.com/Terasology/WorldlyTooltipAPI&quot;&gt;WorldlyTooltipAPI&lt;/a&gt; module which too has no content of its own, but just serves as an API module for &lt;a href=&quot;https://github.com/Terasology/WorldlyTooltip&quot;&gt;WorldlyTooltip&lt;/a&gt;. This was decided to be a better alternative to optional dependencies.&lt;/p&gt;

&lt;div class=&quot;collapsiblecontainer&quot;&gt;
&lt;div class=&quot;collapsibleheader&quot;&gt;&lt;span&gt;+ &lt;/span&gt;&lt;span&gt;What is a Library module?&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;collapsiblecontent&quot;&gt;   
    A library module is one that does not have any features or content of its own. It only provides systems that are used by other modules. An example of such a module is the Pathfinding module. Also the newly created, AdvancedBehaviors module would just be a library module.
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Modules like WildAnimals that use events from the WorldlyTooltip module should not have a dependency on it as it doesn’t need to be necessarily activated. A user should be able to enjoy the WildAnimals module without having to activate the WorldlyTooltip module. One possible way to solve this is using optional dependencies.&lt;/p&gt;

&lt;div class=&quot;collapsiblecontainer&quot;&gt;
&lt;div class=&quot;collapsibleheader&quot;&gt;&lt;span&gt;+ &lt;/span&gt;&lt;span&gt;What is an optional dependency?&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;collapsiblecontent&quot;&gt;   
	An optional dependency allows the user to activate modules that depend on other modules without activating the other module. The features that rely on the other module would just be enabled when the other module is activated.
    &lt;br /&gt;
    Lets take the WildAnimals and WorldlyTooltip module as an example. If the WildAnimals module is made to have an optional dependency on the WorldlyTooltip module, it's core features would be accessible even when the WorldlyTooltip module is inactive. Activating the WorldlyTooltip module just would enable the features that rely on it.
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;collapsiblecontainer&quot;&gt;
&lt;div class=&quot;collapsibleheader&quot;&gt;&lt;span&gt;+ &lt;/span&gt;&lt;span&gt;What are the problems with optional dependencies?&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;collapsiblecontent&quot;&gt;   
    Optional dependencies make sure that the user doesn't have to forcefully download a module that serves as an optional dependency. But for a developer, the module would not compile unless the developer manually downloads all the optional dependencies. Also there is a chance that with some changes happening in Java, this feature might not be available later.
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The other way to do this is using what are called API modules.&lt;/p&gt;

&lt;div class=&quot;collapsiblecontainer&quot;&gt;
&lt;div class=&quot;collapsibleheader&quot;&gt;&lt;span&gt;+ &lt;/span&gt;&lt;span&gt;What is an API module?&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;collapsiblecontent&quot;&gt; 
    An API module is one that allows for modules to use on a feature that is present in an external module without having a direct dependency on it. In short it is an alternative to optional dependencies. It can be thought of as an interface to a class. If a module X relies on some classes in Y for a feature, the classes can be moved to Z. Both X and Y can now have dependency on Z and everything would work naturally. This means that Y does not necessarily need to be activated for the user to enjoy the core features of X.
    &lt;br /&gt;&lt;br /&gt;
    For example, the WildAnimals module uses the events from the WorldlyTooltip module for the tooltip feature. To enable this, the events were moved to the API module called WorldlyTooltipAPI. Both WildAnimals and WorldlyTooltip had a dependency on the WorldlyTooltipAPI module. WildAnimals module could now be activated without activating the WorldlyTooltip functionality (even though the dependency WorldlyTooltipAPI got activated).
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;taming-animals&quot;&gt;Taming animals&lt;/h2&gt;
&lt;p&gt;With behaviors being defined for animals, it would be fun to turn a hostile or aggressive animal into a friendly one. Having a horse that you can ride, a donkey that carries around some load, a dog that guards an entrance, a cow that gives milk, all sound like a fun idea to have in game. Here are some thoughts on how taming can work in game.&lt;/p&gt;

&lt;p&gt;Animals can be broadly and vaguely grouped into friendly and unfriendly, with different animals falling at different levels in this classification. Generally, the friendlier the animal, the easier it would be to tame it.&lt;/p&gt;

&lt;h3 id=&quot;how-would-taming-work&quot;&gt;How would taming work?&lt;/h3&gt;
&lt;p&gt;Possibly there could be a taming progress bar that gives the player an idea of how long should he continue the efforts on taming. There might be more than one ways to tame an animal, some more effective than the others. The more effective ones would increase the progress bar quicker allowing for speedy taming.&lt;/p&gt;

&lt;h3 id=&quot;taming-methods&quot;&gt;Taming Methods&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Petting&lt;/strong&gt;- Some very friendly animals like dogs might just be tamed after a while of petting.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Feeding&lt;/strong&gt;- Every animal would have a preferred food item (or rather a list of food items it eats with an order of preference). Feeding an animal with its favorite food item would increase the taming progress quicker than with other foods.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sedating or Tranquilising&lt;/strong&gt;- Animals can be fed poisonous berries or some other substances to intoxicate them. These would leave them vulnerable and make them easier to tame. Such an approach would be useful for more unfriendly or aggressive animals.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tranquiliser darts&lt;/strong&gt;- For animals that are hostile and would attack when in proximity of the player, tranquiliser darts could be used to intoxicate and subdue the animal, leaving it in a vulnerable state where it can be fed and tamed easily.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Trap&lt;/strong&gt;- Animals that are timid or hostile would either run away from the player or chase the player. A good idea is to trap the animals and then approach them when they are not in a position to run away or attack. An animal trapped in such a manner would have the feed option available now (which wouldn’t have been available earlier).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Knocking out&lt;/strong&gt;- The animals can be knocked out by fighting off with different equipment. When an animal reaches a low health the player can choose to knock it out. If the player continues to attack it and makes it health reach 0, the animal simply dies as it now does. Knocking out would have a similar effect like tranquilising, it would leave the animal in a vulnerable state where it can be fed and tamed easily.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These options of &lt;strong&gt;Feed&lt;/strong&gt;, &lt;strong&gt;Pet&lt;/strong&gt;, &lt;strong&gt;Knock Out&lt;/strong&gt;, &lt;strong&gt;Poison&lt;/strong&gt; (selectively enabled) can be displayed in a radial menu that appears on &lt;code class=&quot;highlighter-rouge&quot;&gt;E&lt;/code&gt; click on an animal. The radial menu can have a circular progressbar outside that also shows the taming progress.&lt;/p&gt;

&lt;p&gt;Since methods like knocking out or hurting an animal before attempting to tame it seems odd. It can be made possible that the animal remembers only the player which hurt it. This would allow any other player (or even the same player in disguise) to befriend or tame the animal. Such an approach would be necessary only for hostile and aggressive animals and might also bring into picture multiplayer taming.&lt;/p&gt;

&lt;h3 id=&quot;animal-utilities&quot;&gt;Animal Utilities&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Mount for travel&lt;/strong&gt;- Some animals can be chosen as a mount to ride on and for fast travel. Animals would have different speeds, jump heights, stamina etc. Some animals would be suitable for short distance while others for long commutes. Some animals would be stronger than others making them a safer choice of travel. Additionally, some animals may be faster in the day and some faster at night.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Carry load and inventory&lt;/strong&gt;- Most animals would have an inventory of their own that can be used for carrying goods around.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Mining&lt;/strong&gt;- Animals can dig through (with various speeds and capacities) and collect ores and minerals present inside the crust.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Food supply&lt;/strong&gt;- Animals can give eggs or milk that can be used as food.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Wood and stone gatherers&lt;/strong&gt;- Some animals could fell trees and collect wood from their barks. Others could simply go around collecting stone, making construction easier.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Specialised gatherers&lt;/strong&gt;- Some animals could be gatherers for specific items like berries, a specific fruit etc.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Organic Polymer Producer&lt;/strong&gt; - Some animals can be tamed (or killed) to obtain fibre.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Food hunter&lt;/strong&gt;- Tamed carnivores can be trusted to hunt other animals and bring meat. Tamed herbivores can be used to get raw products from trees.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Guard animals&lt;/strong&gt;- Animals can be instructed to guard a location and attack all other players/animals that try to enter.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Combat&lt;/strong&gt;- Different animals can have different special combat abilities that protect the player from attackers.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sea creatures&lt;/strong&gt;- Sea creatures can be used as a mount to cross oceans or for fishing. Some sea creatures can share their reserve of oxygen increasing the player’s breathing capacity. Some sea creatures could be used to collect resources at the bottom of the sea like oil.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Companion&lt;/strong&gt;- An animal that simply follows you around so that you never feel lonely.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Implementing taming in game is still a bonus item, probably something I’d get back to after I’ve checked off the main items. Next week should involve a start to all the puzzle work and making of the new gameplay module.&lt;/p&gt;
</description>
        <pubDate>Sun, 21 May 2017 00:00:00 +0530</pubDate>
        <link>http://localhost:4000/2017/05/21/GSoC-week3.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/21/GSoC-week3.html</guid>
        
        <category>open source</category>
        
        <category>MovingBlocks</category>
        
        <category>Terasology</category>
        
        <category>GSoC</category>
        
        
      </item>
    
      <item>
        <title>GSoC Week 1 and 2: Wild Animals Behavior System</title>
        <description>&lt;style type=&quot;text/css&quot;&gt;
    .collapsiblecontainer {
    width:100%;
    border:1px solid #d3d3d3;
}
.collapsiblecontainer div {
    width:100%;
}
.collapsiblecontainer .collapsibleheader {
    background-color:#d3d3d3;
    padding: 2px;
    cursor: pointer;
    font-weight: bold;
}
.collapsiblecontainer .collapsiblecontent {
    display: none;
    padding : 5px;
}
&lt;/style&gt;

&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.12.0/jquery.min.js&quot;&gt;&lt;/script&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
$(document).ready(function(){
    $(&quot;.collapsibleheader&quot;).click(function () {
        $collapsibleheader = $(this);
        //getting the next element
        $collapsiblecontent = $collapsibleheader.next();
        //open up the collapsiblecontent needed - toggle the slide- if visible, slide up, if not slidedown.
        $collapsiblecontent.slideToggle(500, function () {
            //execute this after slideToggle is done
            //change text of collapsibleheader based on visibility of collapsiblecontent div
            $collapsibleheader.find(&quot;span:first-child&quot;).text(function () {
                //change text based on condition
                return $collapsiblecontent.is(&quot;:visible&quot;) ? &quot;- &quot; : &quot;+ &quot;;
            });
        });

    });
}); 

&lt;/script&gt;

&lt;p&gt;The start to GSoC has been smooth. Currently as I write this wrap up post for week one and two, my work has already crossed the week 3 mark according to my proposal.&lt;/p&gt;

&lt;h1 id=&quot;what-have-i-been-up-to&quot;&gt;What have I been up to?&lt;/h1&gt;
&lt;p&gt;I’ve been adding new features to the &lt;a href=&quot;https://github.com/Terasology/WildAnimals&quot;&gt;WildAnimals&lt;/a&gt; module. The module only had a deer that idly moved around and did nothing else. When hit it would lose health and ultimately just disappear as a glitch when it’s health reached 0.&lt;/p&gt;

&lt;p&gt;A lot has happened since and at this point there are 4 variants of the deer that exhibit very different behaviors- &lt;code class=&quot;highlighter-rouge&quot;&gt;deer&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;insensitiveDeer&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;aggressiveDeer&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;hostileDeer&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Before we get into details of how these were built, let’s have a look at a few preview videos:&lt;/p&gt;

&lt;div class=&quot;videowrapper&quot;&gt;
    &lt;iframe width=&quot;1024&quot; height=&quot;768&quot; src=&quot;https://www.youtube.com/embed/unAqMHKkSC0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;videowrapper&quot;&gt;
    &lt;iframe width=&quot;1024&quot; height=&quot;768&quot; src=&quot;https://www.youtube.com/embed/SjuMzl-5qIc&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&quot;importing-an-animal-in-game&quot;&gt;Importing an animal in game&lt;/h3&gt;
&lt;p&gt;First an animal model is made in blender. After an artist finishes up a model, gets it rigged, UV Mapped and adds animations, it is pushed to the &lt;a href=&quot;https://github.com/MetaTerasology/WildAnimals/&quot;&gt;Meta repository&lt;/a&gt; that holds all the blender files for creature models. There is a comprehensive guide on how to add creatures in game &lt;a href=&quot;https://github.com/Terasology/TutorialAssetSystem/wiki/Add-a-creature&quot;&gt;here&lt;/a&gt; that I’ve written. Also there is one written by flo, &lt;a href=&quot;https://github.com/MovingBlocks/TeraMisc/blob/master/blender_addons/io_md5_exporter/tutorial/Tutorial.md&quot;&gt;here&lt;/a&gt;. Thanks to &lt;a href=&quot;https://github.com/quaternius&quot;&gt;quaternius&lt;/a&gt;, I’ve been getting some help with animal models.&lt;/p&gt;

&lt;h3 id=&quot;working-with-the-animal-in-game&quot;&gt;Working with the animal in game&lt;/h3&gt;
&lt;p&gt;Each animal has a prefab file located &lt;a href=&quot;https://github.com/Terasology/WildAnimals/tree/master/assets/prefabs/animals&quot;&gt;here&lt;/a&gt; that details the characterstics of the animal as components. To know more about components and the Entity system architecture, go &lt;a href=&quot;https://github.com/MovingBlocks/Terasology/wiki/Entity-System-Architecture&quot;&gt;here&lt;/a&gt;.
Once an animal prefab is made, it can be spawned in game by typing &lt;code class=&quot;highlighter-rouge&quot;&gt;spawnPrefab prefabName&lt;/code&gt; in the console.&lt;/p&gt;

&lt;h1 id=&quot;event-driven-behavior-system&quot;&gt;Event driven Behavior System&lt;/h1&gt;
&lt;p&gt;The four different deer I mentioned really have the same animal model, animations and texture. They only vary in behavior. This behavior handling forms the crux of the WildAnimals module. Let’s dive into a little more detail.&lt;/p&gt;

&lt;p&gt;The Behavior System built in the engine allows something known as behavior trees, to define a certain behavior.&lt;/p&gt;

&lt;div class=&quot;collapsiblecontainer&quot;&gt;
&lt;div class=&quot;collapsibleheader&quot;&gt;&lt;span&gt;+ &lt;/span&gt;&lt;span&gt;What is a behavior tree?&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;collapsiblecontent&quot;&gt;   
	A behavior tree is used to define conditional or sequential behavior for an entity. A behavior tree essentially has a set of nodes, each node executes some logic and has a condition set for when it would return a status of FAILURE, SUCCESS or simply keep RUNNING. An involved behavior tree can switch among different nodes based on the previous or child node's status.
	&lt;br /&gt;
	This &lt;a target=&quot;_blank&quot; href=&quot;http://forum.terasology.org/threads/behavior-trees.882/&quot;&gt;forum post&lt;/a&gt; and &lt;a target=&quot;_blank&quot; href=&quot;https://www.youtube.com/watch?v=gPwBSwq4_mg&quot;&gt;youtube video&lt;/a&gt; would really give you a feel for behavior trees.
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;These behavior trees are central to the event driven behavior system. Each behavior tree defines a particular type of behavior that can be applied to an entity, for eg-&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A “&lt;strong&gt;stray&lt;/strong&gt;” behavior can have a deer idly roam around, walk and stand for a while.&lt;/li&gt;
  &lt;li&gt;A “&lt;strong&gt;flee&lt;/strong&gt;” behavior can have the deer run away from the player until it’s at a safe (defined minimum) distance.&lt;/li&gt;
  &lt;li&gt;A “&lt;strong&gt;hostile&lt;/strong&gt;” behavior can have the deer close in on the player and then inflict damage.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The “stray” behavior tree that exists in the &lt;a href=&quot;https://github.com/Terasology/Pathfinding&quot;&gt;Pathfinding module&lt;/a&gt; module looks like this:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/img/strayBT.png&quot; alt=&quot;stray&quot; title=&quot;stray BT&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Each of these behavior trees can be applied to the entity by simply defining it in the entity’s prefab under the BehaviorComponent. But what’s needed for the animals, is a behavior system that controls what behavior the animal has at any point in time. A system that controls when the behavior needs to switch, what should trigger such a switch and which behavior takes a higher precedence. Enter Event Driven Behavior System.&lt;/p&gt;

&lt;div class=&quot;collapsiblecontainer&quot;&gt;
&lt;div class=&quot;collapsibleheader&quot;&gt;&lt;span&gt;+ &lt;/span&gt;&lt;span&gt;What is an event?&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;collapsiblecontent&quot;&gt;   
    An event is an action that propagates through all systems in the game to trigger a change or execute some logic. An event is sent to exactly one entity. An event can be received by event handlers, which can add filters for selecting only entities having a certain set of components. Different event handlers can receive the same event in an order of precedence, by specifying a priority.
    &lt;br /&gt;
    This &lt;a target=&quot;_blank&quot; href=&quot;https://github.com/MovingBlocks/Terasology/wiki/Events-and-Systems&quot;&gt;wiki page&lt;/a&gt; describes in detail how events work.
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The WildAnimals module has different packages for different behaviors like “FleeOnHit”, “AttackOnHit”, “AttackInProximity”, “StrayIfIdle”, etc. Each of these packages consists of a system and a component. If such a component is attached to an entity, the respective system takes care of handling the behavior changes associated with that package.&lt;/p&gt;

&lt;div class=&quot;collapsiblecontainer&quot;&gt;
&lt;div class=&quot;collapsibleheader&quot;&gt;&lt;span&gt;+ &lt;/span&gt;&lt;span&gt;How does it work?&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;collapsiblecontent&quot;&gt;
    The component from the package whose behavior is to be implemented in an entity, is added to the entity's prefab. Whenever an action/event happens in the game that could trigger a change in the behavior of an entity, an UpdateBehaviorEvent (a consumable event) is sent to the entity. This event is received by event handlers present in any such package's system. These event handlers receive the event based on a priority and trigger the behavior switch by changing the entity's behavior tree inside it's BehaviorComponent.
    &lt;br /&gt;&lt;br /&gt;
    Let's take the example of the &quot;FleeOnHit&quot; and &quot;StrayIfIdle&quot; package, the first such packages. &lt;br /&gt;
    &lt;ul&gt;
    &lt;li&gt;
    The FleeOnHit package has a FleeOnHitComponent, which when attached to any wild animal entity would let it exhibit the &quot;flee&quot; behavior when it is hit. &lt;br /&gt;
    &lt;/li&gt;
    &lt;li&gt;
    The StrayIfIdle package has a StrayIfIdleComponent, which when attached to any wild animal entity would let it exhibit the stray behavior when it is idle and has no other behavior that could get triggered. &lt;br /&gt;
    &lt;/li&gt;
    &lt;li&gt;
    For the deer, by default it has a behavior of &quot;stray&quot; defined in it's prefab.&lt;br /&gt;
    &lt;/li&gt;
    &lt;li&gt;
    The FleeOnHitSystem watches for the OnDamageEvent to happen to an entity which has the WildAnimalComponent and FleeOnHitComponent. It saves the event instigator (damage inflictor) to the FleeOnHitComponent and then sends an UpdateBehaviorEvent to the entity to trigger a change if it's needed.
    &lt;/li&gt;
    &lt;li&gt;
    The UpdateBehaviorEvent is received by the FleeOnHitSystem. It checks for the instigator inside &quot;FleeOnHit&quot; to be non-null, triggers the behavior switch to &quot;flee&quot; and consumes the UpdateBehaviorEvent.&lt;br /&gt;
    &lt;/li&gt;
    &lt;li&gt;
    The StrayIfIdleSystem also receives the UpdateBehaviorSystem, but with a lower priority.
    &lt;/li&gt;
    &lt;li&gt;
    When the deer reaches a safe (defined minimum) distance from the player, the instigator in the FleeOnHitComponent is set to null and another UpdateBehaviorEvent is fired from the CheckFleeStopNode (a part of the &quot;flee&quot; Behavior Tree).&lt;br /&gt;
    &lt;/li&gt;
    &lt;li&gt;
    This event is not consumed by the FleeOnHitSystem event handler as the instigator in FleeOnHitComponent is null. It then is received by the StrayIfIdleSystem event handler, which triggers a behavior switch to &quot;stray&quot; and consumes the event.
    &lt;/li&gt;
    &lt;/ul&gt;
    &lt;br /&gt;
    The behavior switches simply happen based on the different priorities the event handlers in the different packages have.
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;advantages-of-the-event-driven-behavior-system&quot;&gt;Advantages of the Event Driven Behavior System&lt;/h3&gt;
&lt;p&gt;There are quite a few advantages of using this approach for dealing with complex and multiple behaviors.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Easily Extendable and Reusable&lt;/strong&gt;: A package consisting of a particular conditional behavior can be used for multiple animals/entities. For eg- the “FleeOnHit” package made for the deer can easily be added to other animals like cows, dogs etc. Adding a behavior is as simple as attaching a component.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Efficient&lt;/strong&gt;: There are no constant checks and running loops. The behavior switch is instant.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Simple Behavior Trees&lt;/strong&gt;: The behavior trees remain bare-bones and minimal, as they have to deal with only one behavior and not worry about switching behavior.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Neat Prefabs&lt;/strong&gt;: The prefab for the animal now gives a good picture of what all behaviors it exhibits. A simple deer’s prefab would just have the “FleeOnHit” and “StrayIfIdle” components. A deer’s prefab could look like this:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;FleesOnHit&quot;: {
&quot;minDistance&quot;: 15.0
},
&quot;EatsFromBlockIfHungry&quot;: {
 &quot;block&quot;: &quot;grass&quot;,
 &quot;maxWalkDistance&quot;: 4
},
&quot;AttractedByHoldItems&quot;: {
 &quot;items&quot;: [&quot;apple&quot;, &quot;nut&quot;]
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Clear order of precedence&lt;/strong&gt;: Different behaviors can be given different weights as per priority. A hungry deer when hurt would run for it’s life instead of looking for food. A priority list of behaviors could look like this:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ensure safety (flee if recently damaged)
 ensure not hungry
 ensure not thirsty
 ensure not tired
 ensure not curious (has not watched player / player action / player item recently)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Easy development&lt;/strong&gt;: With this system, someone who’s making the “EatIfHungry” package does not have to worry about what will happen if the animal is hit when it’s hungry. All he has to do is assign the event handler for the “EatIfHungry” package a lesser priority than the “FleeOnHit” package’s event handler.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The post went longer than I had expected it to. The next post would contain details of the deer that have been implemented and maybe new creatures! Most deer at this point are just placeholders for other animals whose models aren’t ready yet. Thanks to &lt;a href=&quot;http://forum.terasology.org/members/florian.1335/&quot;&gt;flo&lt;/a&gt; for all his help lately. The whole event driven behavior system idea was born out of a discussion with him. He’s been really helpful in getting my PRs reviewed and merged too.&lt;/p&gt;

&lt;p&gt;In other news, I was away for 3 days (10th to 12th May) for the &lt;a href=&quot;https://www.acadaccelerator.com/Home/CFDShowCase&quot;&gt;Microsoft code.fun.do SHOWCASE event&lt;/a&gt; that was held in Hyderabad. The trip was fun with sponsored flight trips and hotel stay. Have to catch up with lost time on GSoC though.&lt;/p&gt;
</description>
        <pubDate>Mon, 08 May 2017 00:00:00 +0530</pubDate>
        <link>http://localhost:4000/2017/05/08/GSoC-week1-2.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/08/GSoC-week1-2.html</guid>
        
        <category>open source</category>
        
        <category>MovingBlocks</category>
        
        <category>Terasology</category>
        
        <category>GSoC</category>
        
        
      </item>
    
      <item>
        <title>Google Summer of Code Selection</title>
        <description>&lt;p&gt;Summer has kicked off with great news. My proposal for the Google Summer of Code with MovingBlocks- Terasology has been selected.&lt;/p&gt;

&lt;h2 id=&quot;what-is-the-google-summer-of-code&quot;&gt;What is the Google Summer of Code?&lt;/h2&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/img/GSoC.png&quot; alt=&quot;GSoC&quot; title=&quot;GSoC&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To the uninitiated, Google Summer of Code is a global program targeted at bringing university students into open source. Students work with an open source organization on a 3 month programming project during their summer break. Google first selects around 200 organisations and funds their open source projects. It’s a win-win. The students get an awesome learning experience and a huge stipend. The organisations get a lot of work done from the dedicated students. Well, Google just plays the nice guy being a good Samaritan.&lt;/p&gt;

&lt;p&gt;This would be MovingBlocks’ second GSoC selection as a mentoring organisation, which makes it a veteran org already. With a total of 10 slots this year, way more than last year’s 3, this summer might prove to be the immensely productive for MovingBlocks.&lt;/p&gt;

&lt;h2 id=&quot;what-is-movingblocks--terasology&quot;&gt;What is MovingBlocks- Terasology?&lt;/h2&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/img/gooey.png&quot; alt=&quot;Gooey&quot; title=&quot;Gooey&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/MovingBlocks/Terasology&quot;&gt;Moving Blocks- Terasology&lt;/a&gt; is a minecraft-like open source game built in a voxel world. A &lt;a href=&quot;https://en.wikipedia.org/wiki/Voxel&quot;&gt;voxel&lt;/a&gt; world is essentially a 3-D world made up from blocks. Terasology is still in it’s Alpha stage, but what makes it really special is it’s modularity. With a huge, diverse set of modules already developed/in-development, Terasology offers amazing possibilities. It has a very basic minimal engine, where even core features like health, inventory, combat etc can be added on top or removed as plug-in modules.&lt;/p&gt;

&lt;h2 id=&quot;what-am-i-doing&quot;&gt;What am I doing?&lt;/h2&gt;

&lt;p&gt;My &lt;a href=&quot;https://summerofcode.withgoogle.com/projects/#6685506025816064&quot;&gt;project&lt;/a&gt; is titled as &lt;strong&gt;Exploration World- Improved Gameplay&lt;/strong&gt; (proposal &lt;a href=&quot;https://drive.google.com/file/d/0B3HM64I0M4DmYnVWUUpyQkZ2b1k/view&quot;&gt;here&lt;/a&gt;). In a gist, I plan to add WildAnimals, Puzzles, Exploration and other content to create a new gameplay module. The new gameplay module would pack together the best of whatever is created yet, to create a new gameplay setting that would add meaning and purpose for the end user.&lt;/p&gt;

&lt;p&gt;My primary mentor would be &lt;a href=&quot;http://forum.terasology.org/members/skysom.1621/&quot;&gt;Skylar ‘skysom’ Sommers&lt;/a&gt; and secondary mentors would be- &lt;a href=&quot;http://forum.terasology.org/members/florian.1335/&quot;&gt;Florian ‘flo’ Köberle&lt;/a&gt;, &lt;a href=&quot;http://forum.terasology.org/members/xtariq.1697/&quot;&gt;Xavier ‘xtariq’ Tariq&lt;/a&gt; and &lt;a href=&quot;http://forum.terasology.org/members/isaac.1943/&quot;&gt;Isaac ‘iojw’ Ong&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;when-am-i-doing-this&quot;&gt;When am I doing this?&lt;/h2&gt;

&lt;p&gt;Since my college reopens mid-July, I’ve already started work on the Project. Officially May is meant to be a Community-Bonding period for most and the Coding phase only starts in July. However I plan to finish my GSoC early and I’ve already started off with the coding phase.&lt;/p&gt;

&lt;h2 id=&quot;blog-for-updates&quot;&gt;Blog for updates&lt;/h2&gt;

&lt;p&gt;I plan to use this blog to keep updating my progress. This blog will also be an attempt to document the work that I’ll be doing. This is gonna be an exciting summer!&lt;/p&gt;
</description>
        <pubDate>Thu, 04 May 2017 00:00:00 +0530</pubDate>
        <link>http://localhost:4000/2017/05/04/Google-Summer-of-Code.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/04/Google-Summer-of-Code.html</guid>
        
        <category>open source</category>
        
        <category>MovingBlocks</category>
        
        <category>Terasology</category>
        
        <category>GSoC</category>
        
        
      </item>
    
      <item>
        <title>MovingBlocks- GCI Wrap Up</title>
        <description>&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/img/GSoC.png&quot; alt=&quot;GSoC&quot; title=&quot;GSoC&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After an exciting and productive summer that saw huge commitment, dedication and interest from students and mentors alike in MovingBlock’s first ever Google Summer of Code participation, it was time to gear up for some new beginnings.&lt;/p&gt;

&lt;h2 id=&quot;google-code-in&quot;&gt;Google Code-In&lt;/h2&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/img/GCI.png&quot; alt=&quot;GCI&quot; title=&quot;GCI&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Google Code-in is a contest that introduces pre-university students (ages 13-17) to open source software development. Students claim tasks from a pre-selected pool of problems from varying genres and difficulty-levels, work on them one at a time, have them approved by the mentors and repeat. At the end, students are awarded with t-shirts, hoodies and a certificate. The top two winners from each organisation get to go on a trip to Google’s Mountain View office in California, along with a mentor. This year, that is the winter of 2016-17, saw &lt;strong&gt;1,340 students from 62 countries&lt;/strong&gt; completing an impressive 6,418 tasks.&lt;/p&gt;

&lt;p&gt;MovingBlocks having become a veteran org in GSoC, was eligible to participate in this edition of GCI. By mid November, we had gathered a team of mentors who were actively creating bite-sized tasks ranging in complexity and theme. These tasks were assorted as &lt;strong&gt;Code, Documentation/Training, Outreach/Research, Quality Assurance, User Interface&lt;/strong&gt; etc. &lt;strong&gt;November 28th&lt;/strong&gt; marked the start of student activity that would last till &lt;strong&gt;January 18th&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;winter-has-come&quot;&gt;Winter Has Come&lt;/h2&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/img/winterhascome.jpg&quot; alt=&quot;Winter Has Come&quot; title=&quot;Winter Has Come&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With the winter winds came gusts of excited students ready to dive into the pool of tasks that we had created. We had for long discussed how the first week (called the “hell week”) is usually the most intense and oh boy, it did get hectic and overwhelming at times. We saw the pile of tasks deplete faster than we could imagine, and students kept sending in work faster than we could review it. At times it became really helpful to have mentors dispersed over the globe so that we spanned all time-zones. At other times, caffeine was our only reliable salvation.&lt;/p&gt;

&lt;p&gt;IRC exploded with curious students asking for assistance, Github notifications set new records and we began running out of tasks before we could even wipe the sweat off our foreheads. But the entire mentor team pulled up their socks, converted half-baked ideas into well written task desciptions, added more research, design and documentation related tasks, allowed for existing issued on Github to count as tasks and did lots more. Luckily, Terasology had huge potential for multi-instance tasks in creating equipments, food items, recipes and even new plants inside the game. Some of the best works by students were the splendid World Generators they created. More often than not, most of these tasks were in chains containing sequential tasks, such that each bite-sized task provided an introduction to a topic and had a follow up tasks which ensured a gradual increase in complexity and provided direcion to students.&lt;/p&gt;

&lt;p&gt;The Alpha 6 release event happened midway through GCI and went great with several students checking out our event server, which didn’t even crash once in over 60 hours.&lt;/p&gt;

&lt;h2 id=&quot;hell-week-is-just-one-week&quot;&gt;Hell Week is just one week?&lt;/h2&gt;

&lt;p&gt;The “hell week” concept which we had just heard about prior to our participation in GCI, became so much more familiar that we realised how it missed an ‘s’ at the end. The hell week had lasted for an entire three weeks with only slight variation in activity, before it took a stark downfall for Christmas. The majority of the “Create Content” tasks had gone into making new items for Cooking, Potions, Equipment, SimpleFarming and we had loads of new things to test out. Task piles were depleting as always and mentors had to stay on their toes to review work that came in like a storm.&lt;/p&gt;

&lt;h2 id=&quot;crossing-the-finish-line&quot;&gt;Crossing the Finish Line&lt;/h2&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/img/finishflag.png&quot; alt=&quot;Finish Line&quot; title=&quot;Finish Line&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On 18th January, the closing whistle for this edition of Google Code-In was blown. At the end we had- &lt;strong&gt;606 tasks completed by 138 students&lt;/strong&gt;, with a total of 222 starting or otherwise getting in touch with us. The &lt;strong&gt;highest&lt;/strong&gt; was from a student who had &lt;strong&gt;42 tasks&lt;/strong&gt; completed. Out of the 17 organisations that had participated, we came out as the &lt;strong&gt;third highest org&lt;/strong&gt; (with respect to number of tasks completed) which was impressive for a first-timer.&lt;/p&gt;

&lt;p&gt;Once again with the end of winter, we saw amazing work by so many students around the globe. A huge thank you to all the students who participated, for all their contributions. Keep up the entusiasm and foster the love for open source. Most of all, hats off to all of the 11 other overworked mentors (excluding myself)- &lt;strong&gt;Cervator, Skaldarnar, rzats, oniatus, flo, xtariq, SkySom, manu3d, anthodeus, avalancs, josharias&lt;/strong&gt;. Lastly, thanks to Google for provinding us a platform once again to reach out to students and developers across the globe.&lt;/p&gt;

&lt;h2 id=&quot;whos-the-winner&quot;&gt;Who’s the Winner?&lt;/h2&gt;

&lt;p&gt;With GCI closing, there was one more task left, but this time for the mentors. But this was no ‘bite-sized’ task. The mentors were required to select the winners, from the top 11 students by quantity of tasks completed (we had a three way tie at the bottom of the top 10 so it became a top 11). This was extremely difficult as all the students in the list had done great and it was just a numbers game for us to select only 5 winners.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/img/GCIwinners.png&quot; alt=&quot;GCI Winners&quot; title=&quot;GCI Winners&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here are two articles that have our top 2 winners featured- &lt;a href=&quot;http://www.straitstimes.com/singapore/education/third-time-lucky-for-student-in-googles-coding-competition&quot;&gt;Isaac Ong&lt;/a&gt; and &lt;a href=&quot;http://www.thejakartapost.com/life/2017/02/04/three-indonesian-students-win-google-open-source-competition.html&quot;&gt;Scott M. Sunarto&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To all the students who didn’t make it to the list, do not get disheartened, you had done amazing work. I’d highly encourage all students who’d be eligible next year to participate once again, as it’ll again be a great learning experience. To those who would not be eligible, try GSoC.&lt;/p&gt;

&lt;p&gt;The real winner, I believe was MovingBlocks, as we witnessed a load of talented students connect with us and deliver amazing work. Some of these have grown to care about the project and our community has grown.&lt;/p&gt;

&lt;h2 id=&quot;student-reviews&quot;&gt;Student Reviews&lt;/h2&gt;

&lt;p&gt;We ended GCI with a &lt;a href=&quot;http://forum.terasology.org/threads/google-code-in-2016-recap-thread.1752/&quot;&gt;recap thread&lt;/a&gt; to discuss students’ experiences with Terasology. We even went ahead and made it a finishing task which students could claim.&lt;/p&gt;

&lt;p&gt;The interests in various parts of the game varied and the we received valuable input on how we could improve on our tasks next year. Overall we received compliments on areas such as interaction, assistance, availability and speedy reviews. General feedback about mentors and our review system was very flattering. Some students described us as the “most accommodating org” and our response rates as “phenonmenal”. One student descibed our tasks as much more fun to do (having advantage of being a game) while another talks about the second family nature of our IRC.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/img/terasologylogo.png&quot; alt=&quot;Terasology&quot; title=&quot;Terasology&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All in all, it was a huge learning experience, both for the students and for the Terasology community. We now know a lot many ways in which we can improve the next year. Till then it is time to prepare for GSoC ‘17.&lt;/p&gt;

</description>
        <pubDate>Sat, 18 Feb 2017 00:00:00 +0530</pubDate>
        <link>http://localhost:4000/2017/02/18/MovingBlocks-GCI-Wrap-Up.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/18/MovingBlocks-GCI-Wrap-Up.html</guid>
        
        <category>open source</category>
        
        <category>MovingBlocks</category>
        
        <category>Terasology</category>
        
        <category>GCI</category>
        
        
      </item>
    
      <item>
        <title>Terasology: Getting Started</title>
        <description>&lt;style type=&quot;text/css&quot;&gt;
    .collapsiblecontainer {
    width:100%;
    border:1px solid #d3d3d3;
}
.collapsiblecontainer div {
    width:100%;
}
.collapsiblecontainer .collapsibleheader {
    background-color:#d3d3d3;
    padding: 2px;
    cursor: pointer;
    font-weight: bold;
}
.collapsiblecontainer .collapsiblecontent {
    display: none;
    padding : 5px;
}
&lt;/style&gt;

&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.12.0/jquery.min.js&quot;&gt;&lt;/script&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
$(document).ready(function(){
    $(&quot;.collapsibleheader&quot;).click(function () {
        $collapsibleheader = $(this);
        //getting the next element
        $collapsiblecontent = $collapsibleheader.next();
        //open up the collapsiblecontent needed - toggle the slide- if visible, slide up, if not slidedown.
        $collapsiblecontent.slideToggle(500, function () {
            //execute this after slideToggle is done
            //change text of collapsibleheader based on visibility of collapsiblecontent div
            $collapsibleheader.find(&quot;span:first-child&quot;).text(function () {
                //change text based on condition
                return $collapsiblecontent.is(&quot;:visible&quot;) ? &quot;- &quot; : &quot;+ &quot;;
            });
        });

    });
}); 

&lt;/script&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/img/Terasology.jpg&quot; alt=&quot;Terasology&quot; title=&quot;Terasology&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is a comprehensive guide for getting started with your first contribution to the Terasology project. If you’ve stumbled here and don’t know what Terasology is, check out the &lt;a href=&quot;https://github.com/MovingBlocks/Terasology&quot;&gt;github repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/MovingBlocks/Terasology/wiki/Dev-Setup&quot;&gt;Quick Start guide&lt;/a&gt; on the github wiki of the repository is pretty complete, but it can get a little confusing if this is your first time. If not and you want to get cracking as soon as possible, do head over there.&lt;/p&gt;

&lt;p&gt;Without any further ado, let’s get started.&lt;/p&gt;

&lt;h1 id=&quot;run-from-source&quot;&gt;Run from source&lt;/h1&gt;
&lt;p&gt;This is probably the first and most important step you need to do before you can do anything else. Also, the first question you’ll be asked on IRC when you’re in doubt, is whether you’re able to “run from source”.&lt;/p&gt;

&lt;h2 id=&quot;1-get-java&quot;&gt;1. Get Java&lt;/h2&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/img/java.png&quot; alt=&quot;Java&quot; title=&quot;Java&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Java 8 SDK is a requirement for the game to run. You can download this from &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot;&gt;here&lt;/a&gt; by choosing your OS.&lt;/p&gt;

&lt;h2 id=&quot;2-get-git&quot;&gt;2. Get Git&lt;/h2&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/img/git.png&quot; alt=&quot;Git&quot; title=&quot;Git&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you don’t have git setup, you need to do so before going any further. You’ll need git to collaborate and contribute to this project.&lt;/p&gt;
&lt;div class=&quot;collapsiblecontainer&quot;&gt;
&lt;div class=&quot;collapsibleheader&quot;&gt;&lt;span&gt;+ &lt;/span&gt;&lt;span&gt;What is git?&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;collapsiblecontent&quot;&gt;   
	Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.
	Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later.
	&lt;br /&gt;
	Git allows the users working on a project to mirror and save all changes they make on the central server as well as keep a copy in their own system.
&lt;/div&gt;
&lt;/div&gt;

&lt;h4 id=&quot;for-linux&quot;&gt;For Linux:&lt;/h4&gt;
&lt;p&gt;If you’re on Fedora, you can use yum:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo yum install git-all&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you’re on a Debian-based distribution like Ubuntu, try apt-get:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo apt-get install git-all&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;for-windows&quot;&gt;For Windows:&lt;/h4&gt;
&lt;p&gt;Download git for windows &lt;a href=&quot;https://git-scm.com/download/win&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;configuration&quot;&gt;Configuration:&lt;/h4&gt;
&lt;p&gt;Once you have git installed, open bash (terminal) in Linux or git bash (from Programs) in Windows and get it configured.
git config –global user.name “Your Name”
git config –global user.email “your_email@whatever.com”&lt;/p&gt;

&lt;h2 id=&quot;3-fork&quot;&gt;3. Fork&lt;/h2&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/img/fork.png&quot; alt=&quot;Fork&quot; title=&quot;Fork&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;collapsiblecontainer&quot;&gt;
&lt;div class=&quot;collapsibleheader&quot;&gt;&lt;span&gt;+ &lt;/span&gt;&lt;span&gt;What is a fork?&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;collapsiblecontent&quot;&gt;   
A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project. Forking the &lt;a href=&quot;https://github.com/MovingBlocks/Terasology&quot;&gt;MovingBlocks/Terasology&lt;/a&gt; repository would create a copy of it at &lt;a&gt;www.github.com/your_github_username/Terasology&lt;/a&gt;.
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Click &lt;em&gt;&lt;a href=&quot;https://github.com/MovingBlocks/Terasology/fork&quot;&gt;here&lt;/a&gt;&lt;/em&gt; to fork the &lt;em&gt;&lt;a href=&quot;https://github.com/MovingBlocks/Terasology&quot;&gt;Terasology github repository&lt;/a&gt;.&lt;/em&gt; Doing so will create a repository named “Terasology” under your github account and take you to it. From now you can access your copy of the repository here: &lt;a&gt;www.github.com/your_github_username/Terasology&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-clone&quot;&gt;4. Clone&lt;/h2&gt;
&lt;div class=&quot;collapsiblecontainer&quot;&gt;
&lt;div class=&quot;collapsibleheader&quot;&gt;&lt;span&gt;+ &lt;/span&gt;&lt;span&gt;What is cloning?&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;collapsiblecontent&quot;&gt;   
Cloning downloads or &quot;clones&quot; a repository into a newly created directory by the name of the repository. Cloning www.github.com/your_github_username/Terasology on your machine would create a folder named Teraslogy and download all the content inside it. Use cd to move in and out of directories when inside bash/git-bash.
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Open up bash (Linux) or git-bash (Windows), go to the directory where you want to clone the repository:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;path/to/directory/
git clone www.github.com/your_github_username/Terasology
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;Terasology/&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;5-run-the-game&quot;&gt;5. Run the game&lt;/h2&gt;
&lt;p&gt;You now have the repository cloned and can run the game using gradlew.&lt;/p&gt;

&lt;p&gt;Open bash or git-bash, cd in to the Terasology directory and type in:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;./gradlew game&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;collapsiblecontainer&quot;&gt;
&lt;div class=&quot;collapsibleheader&quot;&gt;&lt;span&gt;+ &lt;/span&gt;&lt;span&gt;What is gradlew?&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;collapsiblecontent&quot;&gt;   
The gradlew is a script which downloads a version of the Gradle through which most of the automation happens. The initial gradlew execution will download all project dependencies and could take a while. So, be patient.&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This should show a build log, and launch the game. If this worked you’re able to run from source. If it didn’t you should get back to IRC and ask for help in debugging. However, any problem encountered at this point is usually from Java not being configured right, such as having an older version as your default Java. See &lt;a href=&quot;https://github.com/MovingBlocks/Terasology/wiki/Common-Issues&quot;&gt;Common Issues&lt;/a&gt; for more.&lt;/p&gt;

&lt;p&gt;Ask in the Support Forum if issues remain, or come join us on #terasology on Freenode IRC. See &lt;a href=&quot;https://github.com/MovingBlocks/Terasology/wiki/Using-IRC&quot;&gt;Using IRC&lt;/a&gt; and please be patient! IRC isn’t necessarily instant communication and it may take a while to get a reply.&lt;/p&gt;

&lt;h2 id=&quot;6-use-an-ide&quot;&gt;6. Use an IDE&lt;/h2&gt;

&lt;p&gt;With this large a project, you could easily get lost and ‘grep’ing would be inefficient. We have a series of customizations that prepare run configurations, Git integration, and so on for the project, specifically for IntelliJ. Eclipse has fewer of these but is still entirely usable, as is NetBeans, but you’ll need to figure out some details there yourself. I personally recommend the use of Intelij IDEA.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/img/intellij.jpeg&quot; alt=&quot;Intellij&quot; title=&quot;Intellij&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;install-intellij-idea-on-linux&quot;&gt;Install Intellij IDEA on Linux:&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo apt-add-repository ppa:mmk2410/intellij-idea-community
sudo apt-get update
sudo apt-get install intellij-idea-community&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;install-intellij-idea-on-windows&quot;&gt;Install Intellij IDEA on Windows:&lt;/h4&gt;

&lt;p&gt;Download and install the setup from &lt;a href=&quot;https://www.jetbrains.com/idea/download/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Open bash or git-bash and type:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;./gradlew idea&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This would prepare project files for Intellij. Open the resulting Terasology.ipr as an existing project in IntelliJ - do not create a new project or attempt to import the project via Gradle.&lt;/p&gt;

&lt;h2 id=&quot;7-find-a-bug&quot;&gt;7. Find a Bug&lt;/h2&gt;

&lt;p&gt;Once you are able to run from source and preferably have an IDE set up, you should get started with working on your first bug. The complete list of issues can be found &lt;a href=&quot;https://github.com/MovingBlocks/Terasology/issues&quot;&gt;here&lt;/a&gt;. However, you should look for issus with the tag &lt;code class=&quot;highlighter-rouge&quot;&gt;Bite-size&lt;/code&gt;. All bite-sized issues can be found &lt;a href=&quot;https://github.com/MovingBlocks/Terasology/issues?q=is%3Aissue+is%3Aopen+label%3ABite-size&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;8-code-code-and-code&quot;&gt;8. Code, code and code&lt;/h2&gt;

&lt;p&gt;By default you would be on the develop branch. Before you start making changes to the code, remember to create a new branch. This can be skipped, however it is the best practice, especially when working on multiple issues. Also, if you don’t create a new branch, a Pull Request for your second bug fix will also contain a fix for the first bug, if the first PR isn’t merged till then.&lt;/p&gt;

&lt;div class=&quot;collapsiblecontainer&quot;&gt;
&lt;div class=&quot;collapsibleheader&quot;&gt;&lt;span&gt;+ &lt;/span&gt;&lt;span&gt;What is a branch?&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;collapsiblecontent&quot;&gt;   
Within a repository you have branches, which are effectively forks within your own repository. Your branches will have an ancestor commit in your repository, and will diverge from that commit with your changes. You can later merge your branch changes. Branches let you work on multiple disparate features at once.
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;creating-a-new-branch&quot;&gt;Creating a new branch&lt;/h3&gt;
&lt;p&gt;Open bash or git-bash and type:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git checkout -b new_branch_name&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Get cracking on a solution. Ask on IRC when in doubt.&lt;/p&gt;

&lt;h2 id=&quot;9-make-your-first-contribution&quot;&gt;9. Make your first contribution&lt;/h2&gt;

&lt;p&gt;Once you’ve come up with a fix, it’s time to commit those changes and create a pull request.&lt;/p&gt;

&lt;h3 id=&quot;commit-your-changes&quot;&gt;Commit your changes&lt;/h3&gt;
&lt;p&gt;Open bash or git-bash and type:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git add -A
&lt;span class=&quot;c&quot;&gt;# to add all files to staging. You could select individual files too&lt;/span&gt;
git commit -m &lt;span class=&quot;s2&quot;&gt;&quot;Fix for #1234&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# to commit changes with a relevant commit message.&lt;/span&gt;
git push origin new_branch_name
&lt;span class=&quot;c&quot;&gt;# Push to the newly created branch on your fork&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;collapsiblecontainer&quot;&gt;
&lt;div class=&quot;collapsibleheader&quot;&gt;&lt;span&gt;+ &lt;/span&gt;&lt;span&gt;What is a commit?&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;collapsiblecontent&quot;&gt;   
Whenever you commit in git, you take a screenshot of your working directory or your repository. You could come back to this state of your repository later at any point or publish these changes to your fork of the repository.
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;collapsiblecontainer&quot;&gt;
&lt;div class=&quot;collapsibleheader&quot;&gt;&lt;span&gt;+ &lt;/span&gt;&lt;span&gt;What is pushing?&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;collapsiblecontent&quot;&gt;   
In git, when you push, you bring the changes on your local repository come into effect in the remote repository. In this case changes to the branch &quot;new_branch_name&quot; are published on the remote (&quot;origin&quot;) repository www.github.com/your_github_username/Terasology.
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Once you’ve pushed successfully, open up your fork (www.github.com/your_github_username/Terasology). This should show something like:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/img/terasologyPR.png&quot; alt=&quot;PR&quot; title=&quot;PR&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Clicking on “Compare &amp;amp; pull request” opens a page for you to describe your bug and solution. The pull request compares (head) your_github_username/Terasology/new_branch_name with (base) MovingBlocks/Terasology/develop. Fill in everything and hit “Create Pull Request”.&lt;/p&gt;

&lt;p&gt;Once done, let the mentors have a look at your PR. If they want changes, you should make the required changes, test locally and then, create a new commit in the same branch and finally push.&lt;/p&gt;

&lt;h2 id=&quot;10-goto-7&quot;&gt;10. Goto 7&lt;/h2&gt;

&lt;p&gt;Don’t stop now. Go find another bug to fix! :D&lt;/p&gt;

</description>
        <pubDate>Tue, 22 Nov 2016 00:00:00 +0530</pubDate>
        <link>http://localhost:4000/2016/11/22/Terasology-Getting-started.html</link>
        <guid isPermaLink="true">http://localhost:4000/2016/11/22/Terasology-Getting-started.html</guid>
        
        <category>open source</category>
        
        <category>MovingBlocks</category>
        
        <category>Terasology</category>
        
        <category>GCI</category>
        
        
      </item>
    
      <item>
        <title>Mozilla: Quarter of Contribution</title>
        <description>&lt;p&gt;I have decided to dive into open source development this summer. Under the WnCC Seasons of Code programme, I have chosen to take part in the Mozilla Quarter of Contribution project mentored by Kalpesh Krishna (&lt;a href=&quot;https://github.com/martiansideofthemoon&quot;&gt;martiansideofthemoon&lt;/a&gt;). The &lt;a href=&quot;http://wncc-iitb.org/soc/&quot;&gt;WnCC Seasons of Code&lt;/a&gt; is an initiative by the Web and Coding Club of IIT Bombay, much akin to the Google Summer Of Code but without any monetary incentive.&lt;/p&gt;

&lt;h3 id=&quot;mozilla-quarter-of-contribution&quot;&gt;Mozilla: Quarter of Contribution&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://wiki.mozilla.org/Auto-tools/New_Contributor/Quarter_of_Contribution&quot;&gt;Mozilla: Quarter of Contribution&lt;/a&gt; is an opportunity to work on a large project for a couple of months. Current projects for Summer 2016 are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Web Platform Tests - Results Viewer Refactoring (:jgraham, :martianwars)&lt;/li&gt;
  &lt;li&gt;Perfherder (:wlach, :jmaher)&lt;/li&gt;
  &lt;li&gt;Talos (:jmaher, :rwood)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have made a few bug fixes and have merged PRs on Web Platform Tests as well as Perfherder. I have decided to work on wptview under &lt;a href=&quot;https://github.com/jgraham&quot;&gt;:jgraham&lt;/a&gt; and &lt;a href=&quot;https://mozillians.org/en-US/u/martianwars/&quot;&gt;:martianwars&lt;/a&gt; as a part of Mozilla QoC.&lt;/p&gt;

&lt;h3 id=&quot;wptview&quot;&gt;wptview&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mozilla/wptview&quot;&gt;Wptview&lt;/a&gt; is a web platform test viewer. The Web Platform Tests (WPT) are a set of cross browser validation tests designed to validate common functionality on the web between browsers. Wptview is used for viewing the results of web-platform-tests and for easy visual comparison between different tests results. One can add the test data available as mozlog files and all the tests along with their results will be loaded in the form of a table. These results can be studied further by adding filters and sorting by status.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://wiki.mozilla.org/Auto-tools/New_Contributor/Quarter_of_Contribution/WPTViewer_Refactor&quot;&gt;agenda for the QoC&lt;/a&gt; is a UI revamp, addition of unit testing as well as adding visualizations to be accompanied by test results. I would like to work on all these fratures.&lt;/p&gt;

&lt;p&gt;I have fixed a few basic bugs due to which I know a little about the codebase. I am a beginner in AngularJS and plan to learn as I go on contributing to this project.&lt;/p&gt;

&lt;p&gt;In conclusion, I plan to learn a lot contributing to this project. This is my first hand at open source as well, so I hope it turns out to be an exciting learning experience.&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Jun 2016 00:00:00 +0530</pubDate>
        <link>http://localhost:4000/2016/06/03/Mozilla-Quarter-of-Contribution.html</link>
        <guid isPermaLink="true">http://localhost:4000/2016/06/03/Mozilla-Quarter-of-Contribution.html</guid>
        
        <category>open source</category>
        
        <category>mozilla</category>
        
        
      </item>
    
      <item>
        <title>Auto Deploy on Server</title>
        <description>&lt;p&gt;It had been a while since I had been using a server to host the &lt;a href=&quot;http://www.wncc-iitb.org&quot;&gt;website for WnCC&lt;/a&gt;. With a lot of development happening around, updating and testing changes on the server, had become a requirement. Having built the site in Jekyll, I required to shift the contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; from my local machine to &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/www/html&lt;/code&gt; on the server, after every build. I had been following the simple, standard method of using scp, for a long time. Copying all the content from &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/www/html&lt;/code&gt; was now becoming inefficient (as I copied all the files in the folder all over again), took a lot of time as the site started expanding with more multimedia content, and required a long terminal command too. I could have used a probably more efficient way of SSHing into the server, pulling from the git repository and copying the contents of the &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; folder into &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/www/html&lt;/code&gt;. But this would have been tedious too, and probably could have been made easier with a script. Nevertheless, it would have required me to SSH into the server, and atleast a couple of terminal commands.&lt;/p&gt;

&lt;h3 id=&quot;discovering-github-webhooks&quot;&gt;Discovering &lt;a href=&quot;https://developer.github.com/webhooks/&quot;&gt;Github Webhooks&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Enter webhooks. &lt;a href=&quot;https://developer.github.com/webhooks/&quot;&gt;Webhooks&lt;/a&gt; allow one to set up an integration with their github repository to listen for one or more events. Whenever such an event occurs, Github sends a HTTP POST payload to the webhook’s configured URL. An event can occur with the creation of an issue, a push to the server or be triggered whenever a repository is starred, forked etc. Webhooks can be used to do a lot of things. I have used a webhook, in this example for the quite general purpose of setting up an auto-deplow on my server.&lt;/p&gt;

&lt;p&gt;Github provides a quite &lt;a href=&quot;https://developer.github.com/webhooks/configuring/&quot;&gt;comprehensive guide&lt;/a&gt; about how to set up a webhook to the local host which is connected to the web using &lt;a href=&quot;https://ngrok.com/download&quot;&gt;ngrok&lt;/a&gt;. I followed the guide and replicated similar steps on my server to get my webhook configured to send a HTTP POST payload to the server.&lt;/p&gt;

&lt;h3 id=&quot;using-sinatra&quot;&gt;Using &lt;a href=&quot;http://www.sinatrarb.com/&quot;&gt;Sinatra&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I used Sintara to create a simple web framework which would receive a HTTP POST made to the configured server URL, and run a small shell command. Having written this small piece of code, I could now reflect all changes made in the repository on the website, everytime a push is made to the repository. The following code renames the &lt;code class=&quot;highlighter-rouge&quot;&gt;html&lt;/code&gt; folder inside &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/www/&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; and performs a git pull inside &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/www&lt;/code&gt; and later renames it back to &lt;code class=&quot;highlighter-rouge&quot;&gt;html&lt;/code&gt;. This is done as the built site lies inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; folder of the repository. I&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# hook.rb&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'sinatra'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'json'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'0.0.0.0'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/payload'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#push = JSON.parse(request.body.read)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#puts &quot;I got some JSON: #{push.inspect}&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`mv html _site ; git pull origin master; mv _site html`&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Running a &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby hook.rb -o 0.0.0.0&lt;/code&gt; will give a message like &lt;code class=&quot;highlighter-rouge&quot;&gt;Sinatra/1.4.4 has taken the stage on 4567...&lt;/code&gt;. Making a POST request on http://IP:4567/payload, will now trigger the shell command in the above script. (&lt;code class=&quot;highlighter-rouge&quot;&gt;-o 0.0.0.0&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;set :bind, '0.0.0.0'&lt;/code&gt; allows access from networks other than localhost)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You may have to enable the port if you are using a firewall on your server. A simple &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo ufw allow 4567&lt;/code&gt; should do it.&lt;/p&gt;

&lt;p&gt;However this session of Sinatra will close as soon as you CTRL+C out of it or logout. To keep such an instance running even after logout you could try&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nohup sudo ruby hook.rb -o 0.0.0.0 &amp;amp;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This would put the Sinatra process in background and keep it running even after you have logged out.&lt;/p&gt;

&lt;p&gt;I did not know about github webhooks earlier and this was an interesting find. The above was a quick setup for automation. If you know a way in which I could improve it, do let me know in the comments.&lt;/p&gt;

&lt;p&gt;Till next time!&lt;/p&gt;
</description>
        <pubDate>Wed, 18 May 2016 00:00:00 +0530</pubDate>
        <link>http://localhost:4000/2016/05/18/auto-deploy.html</link>
        <guid isPermaLink="true">http://localhost:4000/2016/05/18/auto-deploy.html</guid>
        
        <category>git</category>
        
        <category>ruby</category>
        
        
      </item>
    
      <item>
        <title>J.A.R.V.I.S.</title>
        <description>&lt;p class=&quot;center w100&quot;&gt;&lt;img src=&quot;/img/jarvis.jpg&quot; alt=&quot;J.A.R.V.I.S.&quot; title=&quot;J.A.R.V.I.S.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Almost a week ago, I attempted to create &lt;a href=&quot;https://github.com/nihal111/J.A.R.V.I.S&quot;&gt;my own version&lt;/a&gt; of Iron Man’s J.A.R.V.I.S. which would perform a few tasks and have chatbot like abilities. After a bit of research I found out about &lt;a href=&quot;http://www.alicebot.org/aiml.html&quot;&gt;AIML&lt;/a&gt; and its &lt;a href=&quot;https://pypi.python.org/pypi/PyAIML&quot;&gt;interpreter for python&lt;/a&gt;. I also found ways to convert text to speech and speech to to text using python libraries like &lt;a href=&quot;https://pypi.python.org/pypi/pyttsx&quot;&gt;pyttsx&lt;/a&gt; and &lt;a href=&quot;https://pypi.python.org/pypi/SpeechRecognition/3.4.3&quot;&gt;SpeechRecognition&lt;/a&gt;. I soon ended up making a J.A.R.V.I.S. which understood some of the things I said and performed a few fun actions.&lt;/p&gt;

&lt;h2 id=&quot;configuring-voice-input-and-output&quot;&gt;Configuring voice input and output:&lt;/h2&gt;

&lt;h3 id=&quot;text-to-speech&quot;&gt;Text to Speech:&lt;/h3&gt;

&lt;p&gt;With pyttsx installed through &lt;code class=&quot;highlighter-rouge&quot;&gt;pip install pyttsx&lt;/code&gt; or otherwise,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pyttsx&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jarvis_speech&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pyttsx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jarvis_speech&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runAndWait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This should produce an audio output of “Hello World” in a slightly mechanical voice.&lt;/p&gt;

&lt;h3 id=&quot;speech-to-text&quot;&gt;Speech-to-Text:&lt;/h3&gt;

&lt;p&gt;With SpeechRecognition installed through &lt;code class=&quot;highlighter-rouge&quot;&gt;pip install SpeechRecognition&lt;/code&gt; or otherwise,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;speech_recognition&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sr&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Recognizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Microphone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Talk to J.A.R.V.I.S: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;audio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recognize_google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;audio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recognize_google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;audio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UnknownValueError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;offline_speak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I couldn't understand what you said! Would you like to repeat?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestError&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Could not request results from Google Speech Recognition service; {0}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This should listen to an audio input once from the microphone. However this can produce a series of warnings and errors. Resolution for some errors can be found in the Troubleshooting section of &lt;a href=&quot;https://pypi.python.org/pypi/SpeechRecognition/3.4.3&quot;&gt;this page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;working-with-aiml&quot;&gt;Working with AIML:&lt;/h2&gt;

&lt;p&gt;AIML stands for Artificial Intelligence Markup Language. AIML is XML based markup language meant to create artificial intelligent application to create human interface. Using AIML, the implementation remains easy to program and highly maintainable. However, the development for AIML has become rather stagnant and AIML 1.0 (the one which has a python interpreter) has a documentation dating back to 2005, making it quite obsolete. Nevertheless, AIML is easy to learn and fun to use. At the very basic level, AIML recognizes patterns and gives responses as programmed. The patterns are called categories and responses are called templates. A very basic AIML code looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;aiml&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.0.1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;encoding=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;category&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;pattern&amp;gt;&lt;/span&gt;HELLO&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pattern&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
		Well, hello!
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/category&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/aiml&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This small piece of code allows J.A.R.V.I.S. to reply with “Well, hello!” for every “HELLO” it gets as input.&lt;/p&gt;

&lt;p&gt;Such a code can then be customised to give a random output from a list of templates, redirect to a already defined pattern, use a part or whole of the user’s input, run shell scripts etc. Out of all these running a shell script makes AIML, or atleast J.A.R.V.I.S. very powerful.&lt;/p&gt;

&lt;p&gt;All one has to do to create a chatbot using AIML, is to make up a list of &lt;code class=&quot;highlighter-rouge&quot;&gt;.aiml&lt;/code&gt; files containing categories like the one defined above and use the aiml library for python to import them into a kernel using a &lt;code class=&quot;highlighter-rouge&quot;&gt;startup.xml&lt;/code&gt; file which looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;aiml&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.0.1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;encoding=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;category&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;pattern&amp;gt;&lt;/span&gt;LOAD AIML&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pattern&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;          
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;learn&amp;gt;&lt;/span&gt;*.aiml&lt;span class=&quot;nt&quot;&gt;&amp;lt;/learn&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;        
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/category&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/aiml&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This should allow one to load up all the aiml files present in the working directory to the created kernel. A simple python script to do is:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;aiml&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;kernel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aiml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Kernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kernel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;learn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;startup.xml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kernel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;respond&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;load aiml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;respond&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;raw_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Talk to J.A.R.V.I.S: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A good guide to get started with AIML using the python interpreter can be found &lt;a href=&quot;http://www.devdungeon.com/content/ai-chat-bot-python-aiml&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;using-the-system-tag&quot;&gt;Using the &amp;lt;system&amp;gt; tag:&lt;/h2&gt;

&lt;p&gt;The system tag in AIML is a very powerful tag. It allows the script to run a shell command and use its output. A very simple example of this is:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;category&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;pattern&amp;gt;&lt;/span&gt;WHAT TIME IS IT&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pattern&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
        The time is &lt;span class=&quot;nt&quot;&gt;&amp;lt;system&amp;gt;&lt;/span&gt;date &quot;+%l:%M %P&quot;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/system&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/category&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Running &lt;code class=&quot;highlighter-rouge&quot;&gt;date &quot;+%l:%M %P&quot;&lt;/code&gt; in shell returns the current time in a 12 hour format like “6:12 PM”. This can be used as a template output for the question “What time is it?”.&lt;/p&gt;

&lt;p&gt;Using the &amp;lt;system&amp;gt; tag one can achieve a lot of functionalities like opening applications, killing running processes, changing volume levels, adjusting brightness, changing wallpapers etc. And J.A.R.V.I.S. does quite a few of them.&lt;/p&gt;

&lt;h2 id=&quot;integrating-python-scripts&quot;&gt;Integrating Python scripts&lt;/h2&gt;

&lt;p&gt;Since it is easy enough to use shell commands through AIML. It is equally easy to use the shell to run python scripts and perform tasks using their output. A really fun example and perhaps the best feature of J.A.R.V.I.S. is the following.&lt;/p&gt;

&lt;h3 id=&quot;finding-and-playing-a-song-on-youtube&quot;&gt;Finding and playing a song on youtube&lt;/h3&gt;
&lt;p&gt;With the following python script, to find the link for first result for a given &lt;code class=&quot;highlighter-rouge&quot;&gt;query&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;urllib&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;urllib2&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bs4&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeautifulSoup&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;+&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://www.youtube.com/results?search_query=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urllib2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;soup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeautifulSoup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lxml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vid&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'class'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'yt-uix-tile-link'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'https://www.youtube.com'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'href'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://www.youtube.com/watch?v=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'https://www.youtube.com'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'href'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://www.youtube.com&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and this AIML file which opens the link provided by the above script in chromium-browser:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;category&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;pattern&amp;gt;&lt;/span&gt;PLAY SONG *&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pattern&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;random&amp;gt;&lt;/span&gt;
           &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Sure thing! &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
           &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Right away, sir! &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
           &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;On it! &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/random&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;system&amp;gt;&lt;/span&gt; chromium-browser &quot;&lt;span class=&quot;nt&quot;&gt;&amp;lt;system&amp;gt;&lt;/span&gt; python youtube.py &quot;&lt;span class=&quot;nt&quot;&gt;&amp;lt;star/&amp;gt;&lt;/span&gt;&quot;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/system&amp;gt;&lt;/span&gt;&quot;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/system&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/category&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;the following output can be achieved:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Talk to J.A.R.V.I.S :&lt;/strong&gt; play song Killswitch Engage This Fire Burns&lt;br /&gt;
&lt;strong&gt;J.A.R.V.I.S:&lt;/strong&gt; Sure thing!  Created new window in existing browser session.&lt;/p&gt;

&lt;p&gt;With this &lt;a href=&quot;https://www.youtube.com/watch?v=OPpJ7xyUapc&quot;&gt;song&lt;/a&gt; opened in a new chromium-browser tab.&lt;br /&gt;
I have improved the above AIML code to produce this output:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Talk to J.A.R.V.I.S :&lt;/strong&gt; play me a song&lt;br /&gt;
&lt;strong&gt;J.A.R.V.I.S :&lt;/strong&gt; What song, sir?&lt;br /&gt;
&lt;strong&gt;Talk to J.A.R.V.I.S :&lt;/strong&gt; Killswitch Engage This Fire Burns&lt;br /&gt;
&lt;strong&gt;J.A.R.V.I.S :&lt;/strong&gt; On it!  Created new window in existing browser session.&lt;/p&gt;

&lt;p&gt;The repository for J.A.R.V.I.S. lies &lt;a href=&quot;https://github.com/nihal111/J.A.R.V.I.S&quot;&gt;here&lt;/a&gt;. Feel free to &lt;a href=&quot;https://github.com/nihal111/J.A.R.V.I.S/fork&quot;&gt;fork&lt;/a&gt; it and customise it. Create a PR if you feel you have an interesting feature that could be added.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;
</description>
        <pubDate>Mon, 16 May 2016 00:00:00 +0530</pubDate>
        <link>http://localhost:4000/2016/05/16/J.A.R.V.I.S..html</link>
        <guid isPermaLink="true">http://localhost:4000/2016/05/16/J.A.R.V.I.S..html</guid>
        
        <category>AI</category>
        
        <category>python</category>
        
        
      </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nihal Singh</title>
    <description>A guide to getting started with Jekyll.
</description>
    <link>http://nihal111.github.io/about/</link>
    <atom:link href="http://nihal111.github.io/about/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 04 Jun 2016 01:23:38 +0530</pubDate>
    <lastBuildDate>Sat, 04 Jun 2016 01:23:38 +0530</lastBuildDate>
    <generator>Jekyll v3.1.3</generator>
    
      <item>
        <title>Mozilla: Quarter of Contribution</title>
        <description>&lt;p&gt;I have decided to dive into open source development this summer. Under the WnCC Seasons of Code programme, I have chosen to take part in the Mozilla Seasons of Code project mentored by Kalpesh Krishna (&lt;a href=&quot;https://github.com/martiansideofthemoon&quot;&gt;martiansideofthemoon&lt;/a&gt;). The &lt;a href=&quot;http://wncc-iitb.org/soc/&quot;&gt;WnCC Seasons of Code&lt;/a&gt; is an initiative by the Web and Coding Club of IIT Bombay, much akin to the Google Summer Of Code but without any monetary incentive.&lt;/p&gt;

&lt;h3 id=&quot;mozilla-quarter-of-contribution&quot;&gt;Mozilla: Quarter of Contribution&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://wiki.mozilla.org/Auto-tools/New_Contributor/Quarter_of_Contribution&quot;&gt;Mozilla: Quarter of Contribution&lt;/a&gt; is an opportunity to work on a large project for a couple of months. Current projects for Summer 2016 are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Web Platform Tests - Results Viewer Refactoring (:jgraham, :martianwars)&lt;/li&gt;
  &lt;li&gt;Perfherder (:wlach, :jmaher)&lt;/li&gt;
  &lt;li&gt;Talos (:jmaher, :rwood)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have made a few bug fixes and have merged PRs on Web Platform Tests as well as Perfherder. I have decided to work on wptview under &lt;a href=&quot;https://github.com/jgraham&quot;&gt;:jgraham&lt;/a&gt; and &lt;a href=&quot;https://mozillians.org/en-US/u/martianwars/&quot;&gt;:martianwars&lt;/a&gt; as a part of Mozilla QoC.&lt;/p&gt;

&lt;h3 id=&quot;wptview&quot;&gt;wptview&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mozilla/wptview&quot;&gt;Wptview&lt;/a&gt; is a web platform test viewer. The Web Platform Tests (WPT) are a set of cross browser validation tests designed to validate common functionality on the web between browsers. Wptview is used for viewing the results of web-platform-tests and for easy visual comparison between different tests results. One can add the test data available as mozlog files and all the tests along with their results will be loaded in the form of a table. These results can be studied further by adding filters and sorting by status.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://wiki.mozilla.org/Auto-tools/New_Contributor/Quarter_of_Contribution/WPTViewer_Refactor&quot;&gt;agenda for the QoC&lt;/a&gt; is a UI revamp, addition of unit testing as well as adding visualizations to be accompanied by test results. I would like to work on all these fratures.&lt;/p&gt;

&lt;p&gt;I have fixed a few basic bugs due to which I know a little about the codebase. I am a beginner in AngularJS and plan to learn as I go on contributing to this project.&lt;/p&gt;

&lt;p&gt;In conclusion, I plan to learn a lot contributing to this project. This is my first hand at open source as well, so I hope it turns out to be an exciting learning experience.&lt;/p&gt;
</description>
        <pubDate>Sat, 04 Jun 2016 00:00:00 +0530</pubDate>
        <link>http://nihal111.github.io/about/2016/06/04/Mozilla-Quarter-of-Contribution.html</link>
        <guid isPermaLink="true">http://nihal111.github.io/about/2016/06/04/Mozilla-Quarter-of-Contribution.html</guid>
        
        <category>open source</category>
        
        <category>mozilla</category>
        
        
      </item>
    
      <item>
        <title>Auto Deploy on Server</title>
        <description>&lt;p&gt;It had been a while since I had been using a server to host the &lt;a href=&quot;http://www.wncc-iitb.org&quot;&gt;website for WnCC&lt;/a&gt;. With a lot of development happening around, updating and testing changes on the server, had become a requirement. Having built the site in Jekyll, I required to shift the contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; from my local machine to &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/www/html&lt;/code&gt; on the server, after every build. I had been following the simple, standard method of using scp, for a long time. Copying all the content from &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/www/html&lt;/code&gt; was now becoming inefficient (as I copied all the files in the folder all over again), took a lot of time as the site started expanding with more multimedia content, and required a long terminal command too. I could have used a probably more efficient way of SSHing into the server, pulling from the git repository and copying the contents of the &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; folder into &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/www/html&lt;/code&gt;. But this would have been tedious too, and probably could have been made easier with a script. Nevertheless, it would have required me to SSH into the server, and atleast a couple of terminal commands.&lt;/p&gt;

&lt;h3 id=&quot;discovering-github-webhookshttpsdevelopergithubcomwebhooks&quot;&gt;Discovering &lt;a href=&quot;https://developer.github.com/webhooks/&quot;&gt;Github Webhooks&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Enter webhooks. &lt;a href=&quot;https://developer.github.com/webhooks/&quot;&gt;Webhooks&lt;/a&gt; allow one to set up an integration with their github repository to listen for one or more events. Whenever such an event occurs, Github sends a HTTP POST payload to the webhook’s configured URL. An event can occur with the creation of an issue, a push to the server or be triggered whenever a repository is starred, forked etc. Webhooks can be used to do a lot of things. I have used a webhook, in this example for the quite general purpose of setting up an auto-deplow on my server.&lt;/p&gt;

&lt;p&gt;Github provides a quite &lt;a href=&quot;https://developer.github.com/webhooks/configuring/&quot;&gt;comprehensive guide&lt;/a&gt; about how to set up a webhook to the local host which is connected to the web using &lt;a href=&quot;https://ngrok.com/download&quot;&gt;ngrok&lt;/a&gt;. I followed the guide and replicated similar steps on my server to get my webhook configured to send a HTTP POST payload to the server.&lt;/p&gt;

&lt;h3 id=&quot;using-sinatrahttpwwwsinatrarbcom&quot;&gt;Using &lt;a href=&quot;http://www.sinatrarb.com/&quot;&gt;Sinatra&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I used Sintara to create a simple web framework which would receive a HTTP POST made to the configured server URL, and run a small shell command. Having written this small piece of code, I could now reflect all changes made in the repository on the website, everytime a push is made to the repository. The following code renames the &lt;code class=&quot;highlighter-rouge&quot;&gt;html&lt;/code&gt; folder inside &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/www/&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; and performs a git pull inside &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/www&lt;/code&gt; and later renames it back to &lt;code class=&quot;highlighter-rouge&quot;&gt;html&lt;/code&gt;. This is done as the built site lies inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; folder of the repository. I&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# hook.rb&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;sinatra&#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;json&#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;0.0.0.0&#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/payload&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#push = JSON.parse(request.body.read)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#puts &quot;I got some JSON: #{push.inspect}&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`mv html _site ; git pull origin master; mv _site html`&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Running a &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby hook.rb -o 0.0.0.0&lt;/code&gt; will give a message like &lt;code class=&quot;highlighter-rouge&quot;&gt;Sinatra/1.4.4 has taken the stage on 4567...&lt;/code&gt;. Making a POST request on http://IP:4567/payload, will now trigger the shell command in the above script. (&lt;code class=&quot;highlighter-rouge&quot;&gt;-o 0.0.0.0&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;set :bind, &#39;0.0.0.0&#39;&lt;/code&gt; allows access from networks other than localhost)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You may have to enable the port if you are using a firewall on your server. A simple &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo ufw allow 4567&lt;/code&gt; should do it.&lt;/p&gt;

&lt;p&gt;However this session of Sinatra will close as soon as you CTRL+C out of it or logout. To keep such an instance running even after logout you could try&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nohup sudo ruby hook.rb -o 0.0.0.0 &amp;amp;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This would put the Sinatra process in background and keep it running even after you have logged out.&lt;/p&gt;

&lt;p&gt;I did not know about github webhooks earlier and this was an interesting find. The above was a quick setup for automation. If you know a way in which I could improve it, do let me know in the comments.&lt;/p&gt;

&lt;p&gt;Till next time!&lt;/p&gt;
</description>
        <pubDate>Wed, 18 May 2016 00:00:00 +0530</pubDate>
        <link>http://nihal111.github.io/about/2016/05/18/auto-deploy.html</link>
        <guid isPermaLink="true">http://nihal111.github.io/about/2016/05/18/auto-deploy.html</guid>
        
        <category>git</category>
        
        <category>ruby</category>
        
        
      </item>
    
      <item>
        <title>J.A.R.V.I.S.</title>
        <description>&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/img/jarvis.jpg&quot; alt=&quot;J.A.R.V.I.S.&quot; title=&quot;J.A.R.V.I.S.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Almost a week ago, I attempted to create &lt;a href=&quot;https://github.com/nihal111/J.A.R.V.I.S&quot;&gt;my own version&lt;/a&gt; of Iron Man’s J.A.R.V.I.S. which would perform a few tasks and have chatbot like abilities. After a bit of research I found out about &lt;a href=&quot;http://www.alicebot.org/aiml.html&quot;&gt;AIML&lt;/a&gt; and its &lt;a href=&quot;https://pypi.python.org/pypi/PyAIML&quot;&gt;interpreter for python&lt;/a&gt;. I also found ways to convert text to speech and speech to to text using python libraries like &lt;a href=&quot;https://pypi.python.org/pypi/pyttsx&quot;&gt;pyttsx&lt;/a&gt; and &lt;a href=&quot;https://pypi.python.org/pypi/SpeechRecognition/3.4.3&quot;&gt;SpeechRecognition&lt;/a&gt;. I soon ended up making a J.A.R.V.I.S. which understood some of the things I said and performed a few fun actions.&lt;/p&gt;

&lt;h2 id=&quot;configuring-voice-input-and-output&quot;&gt;Configuring voice input and output:&lt;/h2&gt;

&lt;h3 id=&quot;text-to-speech&quot;&gt;Text to Speech:&lt;/h3&gt;

&lt;p&gt;With pyttsx installed through &lt;code class=&quot;highlighter-rouge&quot;&gt;pip install pyttsx&lt;/code&gt; or otherwise,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pyttsx&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jarvis_speech&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pyttsx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jarvis_speech&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runAndWait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This should produce an audio output of “Hello World” in a slightly mechanical voice.&lt;/p&gt;

&lt;h3 id=&quot;speech-to-text&quot;&gt;Speech-to-Text:&lt;/h3&gt;

&lt;p&gt;With SpeechRecognition installed through &lt;code class=&quot;highlighter-rouge&quot;&gt;pip install SpeechRecognition&lt;/code&gt; or otherwise,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;speech_recognition&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sr&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Recognizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Microphone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Talk to J.A.R.V.I.S: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;audio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recognize_google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;audio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recognize_google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;audio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UnknownValueError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;offline_speak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I couldn&#39;t understand what you said! Would you like to repeat?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestError&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Could not request results from Google Speech Recognition service; {0}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This should listen to an audio input once from the microphone. However this can produce a series of warnings and errors. Resolution for some errors can be found in the Troubleshooting section of &lt;a href=&quot;https://pypi.python.org/pypi/SpeechRecognition/3.4.3&quot;&gt;this page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;working-with-aiml&quot;&gt;Working with AIML:&lt;/h2&gt;

&lt;p&gt;AIML stands for Artificial Intelligence Markup Language. AIML is XML based markup language meant to create artificial intelligent application to create human interface. Using AIML, the implementation remains easy to program and highly maintainable. However, the development for AIML has become rather stagnant and AIML 1.0 (the one which has a python interpreter) has a documentation dating back to 2005, making it quite obsolete. Nevertheless, AIML is easy to learn and fun to use. At the very basic level, AIML recognizes patterns and gives responses as programmed. The patterns are called categories and responses are called templates. A very basic AIML code looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;aiml&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.0.1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;encoding=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;category&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;pattern&amp;gt;&lt;/span&gt;HELLO&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pattern&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
		Well, hello!
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/category&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/aiml&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This small piece of code allows J.A.R.V.I.S. to reply with “Well, hello!” for every “HELLO” it gets as input.&lt;/p&gt;

&lt;p&gt;Such a code can then be customised to give a random output from a list of templates, redirect to a already defined pattern, use a part or whole of the user’s input, run shell scripts etc. Out of all these running a shell script makes AIML, or atleast J.A.R.V.I.S. very powerful.&lt;/p&gt;

&lt;p&gt;All one has to do to create a chatbot using AIML, is to make up a list of &lt;code class=&quot;highlighter-rouge&quot;&gt;.aiml&lt;/code&gt; files containing categories like the one defined above and use the aiml library for python to import them into a kernel using a &lt;code class=&quot;highlighter-rouge&quot;&gt;startup.xml&lt;/code&gt; file which looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;aiml&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.0.1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;encoding=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;category&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;pattern&amp;gt;&lt;/span&gt;LOAD AIML&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pattern&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;          
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;learn&amp;gt;&lt;/span&gt;*.aiml&lt;span class=&quot;nt&quot;&gt;&amp;lt;/learn&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;        
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/category&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/aiml&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This should allow one to load up all the aiml files present in the working directory to the created kernel. A simple python script to do is:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;aiml&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;kernel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aiml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Kernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kernel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;learn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;startup.xml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kernel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;respond&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;load aiml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;respond&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;raw_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Talk to J.A.R.V.I.S: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A good guide to get started with AIML using the python interpreter can be found &lt;a href=&quot;http://www.devdungeon.com/content/ai-chat-bot-python-aiml&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;using-the-system-tag&quot;&gt;Using the &amp;lt;system&amp;gt; tag:&lt;/h2&gt;

&lt;p&gt;The system tag in AIML is a very powerful tag. It allows the script to run a shell command and use its output. A very simple example of this is:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;category&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;pattern&amp;gt;&lt;/span&gt;WHAT TIME IS IT&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pattern&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
        The time is &lt;span class=&quot;nt&quot;&gt;&amp;lt;system&amp;gt;&lt;/span&gt;date &quot;+%l:%M %P&quot;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/system&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/category&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Running &lt;code class=&quot;highlighter-rouge&quot;&gt;date &quot;+%l:%M %P&quot;&lt;/code&gt; in shell returns the current time in a 12 hour format like “6:12 PM”. This can be used as a template output for the question “What time is it?”.&lt;/p&gt;

&lt;p&gt;Using the &amp;lt;system&amp;gt; tag one can achieve a lot of functionalities like opening applications, killing running processes, changing volume levels, adjusting brightness, changing wallpapers etc. And J.A.R.V.I.S. does quite a few of them.&lt;/p&gt;

&lt;h2 id=&quot;integrating-python-scripts&quot;&gt;Integrating Python scripts&lt;/h2&gt;

&lt;p&gt;Since it is easy enough to use shell commands through AIML. It is equally easy to use the shell to run python scripts and perform tasks using their output. A really fun example and perhaps the best feature of J.A.R.V.I.S. is the following.&lt;/p&gt;

&lt;h3 id=&quot;finding-and-playing-a-song-on-youtube&quot;&gt;Finding and playing a song on youtube&lt;/h3&gt;
&lt;p&gt;With the following python script, to find the link for first result for a given &lt;code class=&quot;highlighter-rouge&quot;&gt;query&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;urllib&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;urllib2&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bs4&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeautifulSoup&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;+&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://www.youtube.com/results?search_query=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urllib2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;soup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeautifulSoup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lxml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vid&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;class&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;yt-uix-tile-link&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;https://www.youtube.com&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;href&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://www.youtube.com/watch?v=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;https://www.youtube.com&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;href&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://www.youtube.com&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and this AIML file which opens the link provided by the above script in chromium-browser:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;category&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;pattern&amp;gt;&lt;/span&gt;PLAY SONG *&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pattern&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;random&amp;gt;&lt;/span&gt;
           &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Sure thing! &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
           &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Right away, sir! &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
           &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;On it! &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/random&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;system&amp;gt;&lt;/span&gt; chromium-browser &quot;&lt;span class=&quot;nt&quot;&gt;&amp;lt;system&amp;gt;&lt;/span&gt; python youtube.py &quot;&lt;span class=&quot;nt&quot;&gt;&amp;lt;star/&amp;gt;&lt;/span&gt;&quot;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/system&amp;gt;&lt;/span&gt;&quot;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/system&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/category&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;the following output can be achieved:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Talk to J.A.R.V.I.S :&lt;/strong&gt; play song Killswitch Engage This Fire Burns&lt;br /&gt;
&lt;strong&gt;J.A.R.V.I.S:&lt;/strong&gt; Sure thing!  Created new window in existing browser session.&lt;/p&gt;

&lt;p&gt;With this &lt;a href=&quot;https://www.youtube.com/watch?v=OPpJ7xyUapc&quot;&gt;song&lt;/a&gt; opened in a new chromium-browser tab.&lt;br /&gt;
I have improved the above AIML code to produce this output:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Talk to J.A.R.V.I.S :&lt;/strong&gt; play me a song&lt;br /&gt;
&lt;strong&gt;J.A.R.V.I.S :&lt;/strong&gt; What song, sir?&lt;br /&gt;
&lt;strong&gt;Talk to J.A.R.V.I.S :&lt;/strong&gt; Killswitch Engage This Fire Burns&lt;br /&gt;
&lt;strong&gt;J.A.R.V.I.S :&lt;/strong&gt; On it!  Created new window in existing browser session.&lt;/p&gt;

&lt;p&gt;The repository for J.A.R.V.I.S. lies &lt;a href=&quot;https://github.com/nihal111/J.A.R.V.I.S&quot;&gt;here&lt;/a&gt;. Feel free to &lt;a href=&quot;https://github.com/nihal111/J.A.R.V.I.S/fork&quot;&gt;fork&lt;/a&gt; it and customise it. Create a PR if you feel you have an interesting feature that could be added.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;
</description>
        <pubDate>Mon, 16 May 2016 00:00:00 +0530</pubDate>
        <link>http://nihal111.github.io/about/2016/05/16/J.A.R.V.I.S..html</link>
        <guid isPermaLink="true">http://nihal111.github.io/about/2016/05/16/J.A.R.V.I.S..html</guid>
        
        <category>AI</category>
        
        <category>python</category>
        
        
      </item>
    
      <item>
        <title>Playing with aliases</title>
        <description>&lt;p&gt;Since I can’t do without my games, I can’t do without Windows, and I have to dualboot. This means that most of my data is stored on a disk shared between both the operating systems. The path to the directory where I keep my projects thus becomes rather long. And I like to keep an alias for it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;cd /media/Nihal/Code&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What this would do is create an alias by the name of ‘code’ which would exist till the time you killed the terminal. Rather I have created a permanent alias for it, which is stored by copying the above line into the &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.bash_aliases&lt;/code&gt;&lt;/strong&gt; file in the home directory (if it doesn’t exist, you should really create one). I wanted to create a few more permanent aliases as and when needed and the process to do so felt tedious. Alas! I wrote another alias for it. Let’s talk about the &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.bash_aliases&lt;/code&gt;&lt;/strong&gt; file before getting there.&lt;/p&gt;

&lt;h3 id=&quot;the-bashrc-file&quot;&gt;The &lt;strong&gt;&lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; file&lt;/h3&gt;
&lt;p&gt;In the home directory there also exists a &lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt; file which shall contain a lot of oher things. The &lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt; file is a script which executes evereytime a terminal is started in the &lt;strong&gt;interactive mode&lt;/strong&gt;. It contains a set of configurations for the terminal.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt; file provides a space to set up variables, functions, aliases etc that you may want to use. The &lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt; is then run every time you open up a new terminal. Be careful, that any error or change you make in the &lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt; file will be reflected in all subsequent terminal windows launced. Also if you have a terminal window running, and you make changes to the &lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt; file thereafter, you will obviously have no effect on the running terminal and you may want to restart it.&lt;/p&gt;

&lt;h3 id=&quot;loading-the-bashaliases-file&quot;&gt;Loading the &lt;strong&gt;&lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.bash_aliases&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; file&lt;/h3&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt; file does a fine job of loading the &lt;code class=&quot;highlighter-rouge&quot;&gt;.bash_aliases&lt;/code&gt; file like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -f ~/.bash_aliases &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    . ~/.bash_aliases
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This essentially allows &lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt; to load the ‘.bash_aliases’ file within itself, preventing you from meddling with it and managing the list of aliases neatly.&lt;/p&gt;

&lt;h3 id=&quot;creating-a-permanent-alias&quot;&gt;Creating a Permanent Alias&lt;/h3&gt;
&lt;p&gt;Creating a permanent alias is easy. Just open up ~/.bash_aliases and append the following line to it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;bar&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Whenever you type in “foo”, “bar” will be passed as an input to the terminal.&lt;br /&gt;
&lt;strong&gt;Note:&lt;/strong&gt; You can do this with ~/.bashrc as well but it is neater not to.&lt;/p&gt;

&lt;p&gt;A perhaps better way to do this would be to automate the task and save yourself the hassle of opening a the fine and appending to it manually. And what better way to create aliases by using another alias? I wanted to have a way to create a permanent alias by just typing in a ‘p’ before alias like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;palias &lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;bar&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To do this, I opened up &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bash_aliases&lt;/code&gt; and created a function called permanent_alias and called it every time I entered “palias” on the terminal:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;permanent_alias&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; | cut -d&lt;span class=&quot;s2&quot;&gt;&quot;=&quot;&lt;/span&gt; -f 1&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; | cut -d&lt;span class=&quot;s2&quot;&gt;&quot;=&quot;&lt;/span&gt; -f 2-&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$KEY&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;=&#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$VALUE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&#39;&quot;&lt;/span&gt; &amp;gt;&amp;gt; /home/nihal/.bash_aliases
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;New permanent bash alias set: alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$KEY&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;=&#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$VALUE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&#39;&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;$VALUE&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#Create alias for function call&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;palias&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;permanent_alias&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;explanation&quot;&gt;Explanation&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;$1 is a &lt;strong&gt;positional parameter&lt;/strong&gt; that returns the first argument passed. Since “palias” is an alias to a function call, it returns the first word after the word “palias”, without the inverted commas. &lt;code class=&quot;highlighter-rouge&quot;&gt;palias foo=&#39;bar&#39;&lt;/code&gt; will return foo=bar as $1.&lt;br /&gt;
Interestingly, $0 returns the address of the script or shell running. In this case /bin/bash&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;$KEY&lt;/strong&gt; and &lt;strong&gt;$VALUE&lt;/strong&gt; variables are defined by splitting the string in $1 at the first “=”. The string &lt;strong&gt;$1&lt;/strong&gt; is passed to cut and with delimiter (&lt;strong&gt;-d&lt;/strong&gt;) as “&lt;strong&gt;=&lt;/strong&gt;”, fields (&lt;strong&gt;-f&lt;/strong&gt;) &lt;strong&gt;1&lt;/strong&gt; and &lt;strong&gt;2-&lt;/strong&gt; are selected&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo=&#39;bar&#39;&quot;&lt;/span&gt; | cut -d&lt;span class=&quot;s2&quot;&gt;&quot;=&quot;&lt;/span&gt; -f 1
&lt;span class=&quot;c&quot;&gt;#returns &quot;foo&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo=&#39;bar&#39;&quot;&lt;/span&gt; | cut -d&lt;span class=&quot;s2&quot;&gt;&quot;=&quot;&lt;/span&gt; -f 2
&lt;span class=&quot;c&quot;&gt;#returns &quot;bar&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;echo &quot;foo=&#39;bar&#39;&quot; | cut -d&quot;=&quot; -f 1&lt;/code&gt; has the same effect as &lt;code class=&quot;highlighter-rouge&quot;&gt;echo &quot;foo=&#39;bar&#39;&quot; | cut --delimiter=&quot;=&quot; --fields 1 &lt;/code&gt;&lt;br /&gt;
&lt;strong&gt;Note:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;echo &quot;foo=&#39;bar==car&#39;&quot; | cut -d&quot;=&quot; -f 2-&lt;/code&gt; fetches ‘bar==car’ while &lt;code class=&quot;highlighter-rouge&quot;&gt;echo &quot;foo=&#39;bar==car&#39;&quot; | cut -d&quot;=&quot; -f 2&lt;/code&gt; fetches ‘bar&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Once KEY and VALUE are abstracted, they are appended to the &lt;code class=&quot;highlighter-rouge&quot;&gt;.bash_aliases&lt;/code&gt; file using&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$KEY&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;=&#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$VALUE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&#39;&quot;&lt;/span&gt; &amp;gt;&amp;gt; /home/user/.bash_aliases&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;  The -e flag is for enabling interpretation of backslash escapes like “\n” (newline). &lt;code class=&quot;highlighter-rouge&quot;&gt;echo &quot;string&quot; &amp;gt;&amp;gt; file&lt;/code&gt; is used to append “string” at the end of file.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;alias $KEY=&#39;$VALUE&#39;&lt;/code&gt; allows you to use your newly declared permanent alias in the running terminal too, by declaring a temporary variable. Not doing this, would result in restarting of terminal for changes to take effect.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;usage&quot;&gt;Usage&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;For single word aliases, scrapping the inverted commas would do.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;palias &lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;bar&#39;&lt;/span&gt;
and
palias &lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;bar
would have same effect as we manually add inverted commas later.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	However,
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;palias &lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;cd /home&#39;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#$1 = &quot;foo=cd /home&quot;&lt;/span&gt;
and
palias &lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /home	
&lt;span class=&quot;c&quot;&gt;#$1 = &quot;foo=cd&quot;&lt;/span&gt;
would not have the same effect.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;For special characters like “ ( , ) , @” etc, scrapping the inverted commas would not work&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;palias &lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;permanent_alias()&#39;&lt;/span&gt;
and
palias &lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;permanent_alias&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
would not have same effect as &lt;span class=&quot;s2&quot;&gt;&quot;(&quot;&lt;/span&gt; would be an unexpected token.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Garbage after the first space won’t matter.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;palias &lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;bar&#39;&lt;/span&gt;
and
palias &lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;bar&#39;&lt;/span&gt; this is an amazing blog
would have same effect.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Spaces around the “=” in &lt;code class=&quot;highlighter-rouge&quot;&gt;palias foo = &#39;bar&#39;&lt;/code&gt; wouldn’t work. They wouldn’t work with regular alias either, for that matter.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you’re still reading, I hope you found it useful. Till next time! :)&lt;/p&gt;
</description>
        <pubDate>Sun, 08 May 2016 00:00:00 +0530</pubDate>
        <link>http://nihal111.github.io/about/2016/05/08/playing-with-aliases.html</link>
        <guid isPermaLink="true">http://nihal111.github.io/about/2016/05/08/playing-with-aliases.html</guid>
        
        <category>bash</category>
        
        <category>tutorial</category>
        
        
      </item>
    
      <item>
        <title>Blog init</title>
        <description>&lt;p&gt;Hi, there! You’ve stumbled upon my first blog post.&lt;/p&gt;

&lt;p&gt;It’s been a while since I first thought of creating my github homepage and blog. And I can’t believe I finally made it.&lt;/p&gt;

&lt;p&gt;Also, this is the first time I’ve used &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; to create a website. Apart from a few impediments in CSS, the journey to completion was smooth. The markdown to HTML conversion is awesome and blog maintenance is easy as well. You could &lt;a href=&quot;https://github.com/nihal111/nihal111.github.io/fork&quot;&gt;fork&lt;/a&gt; this &lt;a href=&quot;https://github.com/nihal111/nihal111.github.io&quot;&gt;repo&lt;/a&gt; and play around with it.&lt;/p&gt;

&lt;p&gt;I’ve made a &lt;a href=&quot;/projects&quot;&gt;projects&lt;/a&gt; section which I’ll keep updating with my latest developments and contributions. I plan to use this blog to write about my experiences and other interesting stuff I come across.&lt;/p&gt;

&lt;p&gt;It’s been a long night. I should go to bed before sunrise!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;blog init
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</description>
        <pubDate>Wed, 04 May 2016 00:00:00 +0530</pubDate>
        <link>http://nihal111.github.io/about/2016/05/04/blog-init.html</link>
        <guid isPermaLink="true">http://nihal111.github.io/about/2016/05/04/blog-init.html</guid>
        
        <category>firstpost</category>
        
        <category>jekyll</category>
        
        
      </item>
    
  </channel>
</rss>
